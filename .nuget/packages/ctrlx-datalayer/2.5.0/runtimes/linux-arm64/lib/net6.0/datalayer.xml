<?xml version="1.0"?>
<doc>
    <assembly>
        <name>datalayer</name>
    </assembly>
    <members>
        <member name="T:Datalayer.AllowedOperationFlags">
            <summary>
            The AllowedOperationFlags enumeration
            </summary>
        </member>
        <member name="F:Datalayer.AllowedOperationFlags.None">
            <summary>
            Defines the None.
            </summary>
        </member>
        <member name="F:Datalayer.AllowedOperationFlags.Read">
            <summary>
            Defines the Read.
            </summary>
        </member>
        <member name="F:Datalayer.AllowedOperationFlags.Write">
            <summary>
            Defines the Write.
            </summary>
        </member>
        <member name="F:Datalayer.AllowedOperationFlags.Create">
            <summary>
            Defines the Create.
            </summary>
        </member>
        <member name="F:Datalayer.AllowedOperationFlags.Delete">
            <summary>
            Defines the Delete.
            </summary>
        </member>
        <member name="F:Datalayer.AllowedOperationFlags.Browse">
            <summary>
            Defines the Browse.
            </summary>
        </member>
        <member name="F:Datalayer.AllowedOperationFlags.All">
            <summary>
            Defines the All.
            </summary>
        </member>
        <member name="T:Datalayer.DatalayerSystem">
            <summary>
            DatalayerSystem class
            </summary>
        </member>
        <member name="M:Datalayer.DatalayerSystem.#ctor(System.String)">
            <summary>
            Initializes a new instance of DatalayerSystem.
            </summary>
            <param name="ipcPath">Path for interprocess communication. Leave empty for automatic detection.</param>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="P:Datalayer.DatalayerSystem.Datalayer#Internal#INative#NativePtr">
            <summary>
            Gets the pointer to the underlying native API object.
            </summary>
        </member>
        <member name="P:Datalayer.DatalayerSystem.Clients">
            <summary>
            Gets the list of created clients.
            </summary>
        </member>
        <member name="P:Datalayer.DatalayerSystem.Providers">
            <summary>
            Gets the list of created providers.
            </summary>
        </member>
        <member name="P:Datalayer.DatalayerSystem.IsDisposed">
            <summary>
            Gets a value that indicates whether the instance is already disposed and useless.
            </summary>
        </member>
        <member name="M:Datalayer.DatalayerSystem.Dispose(System.Boolean)">
            <summary>
            Disposes the instance.
            </summary>
            <param name="disposing">False if called by Finalizer, else true.</param>
        </member>
        <member name="M:Datalayer.DatalayerSystem.Finalize">
            <summary>
            override finalizer only if 'Dispose(bool disposing)' has code to free unmanaged resources
            </summary>
        </member>
        <member name="M:Datalayer.DatalayerSystem.Dispose">
            <summary>
            Dispose the instance.
            </summary>
        </member>
        <member name="M:Datalayer.DatalayerSystem.Delete">
            <summary>
            Deletes the underlying native API object.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Datalayer.DatalayerSystem.DeleteChildren" -->
        <member name="F:Datalayer.DatalayerSystem.DefaultClientPort">
            <summary>
            Gets the default Client port.
            </summary>
        </member>
        <member name="F:Datalayer.DatalayerSystem.DefaultProviderPort">
            <summary>
            Gets the default Provider port.
            </summary>
        </member>
        <member name="F:Datalayer.DatalayerSystem.ProtocolSchemeTcp">
            <summary>
            Gets the protocol scheme for TCP communication. 
            Recommended to connect to a DatalayerSystem not running on localhost.
            </summary>
        </member>
        <member name="F:Datalayer.DatalayerSystem.ProtocolSchemeIpc">
            <summary>
            Gets the protocol scheme for IPC communication.
            Recommended to connect to a DatalayerSystem running on localhost.
            </summary>
        </member>
        <member name="P:Datalayer.DatalayerSystem.IpcPath">
            <summary>
            Gets the path for interprocess communication.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="P:Datalayer.DatalayerSystem.IsStarted">
            <summary>
            Gets a value that indicates whether the DatalayerSystem is started.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="P:Datalayer.DatalayerSystem.BfbsPath">
            <summary>
            Sets the binary Flatbuffer path, which contains *.bfbs files.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.DatalayerSystem.Start(System.Boolean)">
            <summary>
            Starts the DatalayerSystem.
            </summary>
            <param name="startBroker">Use true to start a broker. If you are a user of the ctrlX Data Layer, set to false.</param>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <example>
            <b>Example</b>
            <code>
            using var system = new DatalayerSystem();
            system.Start(startBroker: false);
            </code>
            </example>
        </member>
        <member name="M:Datalayer.DatalayerSystem.Stop">
            <summary>
            Stops the DatalayerSystem.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="P:Datalayer.DatalayerSystem.Factory">
            <summary>
            Gets the Factory to create Clients and Providers.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.InvalidOperationException">Operation not allowed.</exception>
        </member>
        <member name="P:Datalayer.DatalayerSystem.Converter">
            <summary>
            Gets the Converter for Variant to JSON conversions.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="T:Datalayer.DLR_SCHEMA">
            <summary>
            DLR_SCHEMA
            </summary>
        </member>
        <member name="F:Datalayer.DLR_SCHEMA.DLR_SCHEMA_METADATA">
            <summary>
            METADATA
            </summary>
        </member>
        <member name="F:Datalayer.DLR_SCHEMA.DLR_SCHEMA_REFLECTION">
            <summary>
            REFLECTION
            </summary>
        </member>
        <member name="F:Datalayer.DLR_SCHEMA.DLR_SCHEMA_MEMORY">
            <summary>
            MEMORY
            </summary>
        </member>
        <member name="F:Datalayer.DLR_SCHEMA.DLR_SCHEMA_MEMORY_MAP">
            <summary>
            MEMORY_MAP
            </summary>
        </member>
        <member name="F:Datalayer.DLR_SCHEMA.DLR_SCHEMA_TOKEN">
            <summary>
            TOKEN
            </summary>
        </member>
        <member name="F:Datalayer.DLR_SCHEMA.DLR_SCHEMA_PROBLEM">
            <summary>
            PROBLEM
            </summary>
        </member>
        <member name="F:Datalayer.DLR_SCHEMA.DLR_SCHEMA_DIAGNOSIS">
            <summary>
            DIAGNOSIS
            </summary>
        </member>
        <member name="T:Datalayer.DLR_TIMEOUT_SETTING">
            <summary>
            DLR_TIMEOUT_SETTING
            </summary>
        </member>
        <member name="F:Datalayer.DLR_TIMEOUT_SETTING.Idle">
            <summary>
            Timeout to check whether the broker is still active when client is idle.
            Default: 30000 ms
            </summary>
        </member>
        <member name="F:Datalayer.DLR_TIMEOUT_SETTING.Ping">
            <summary>
            Timeout to wait for a response of a request. If timeout is exceeded, the request will be aborted with DL_TIMEOUT.
            Default: 3000 ms
            </summary>
        </member>
        <member name="F:Datalayer.DLR_TIMEOUT_SETTING.Reconnect">
            <summary>
            Timeout a reconnect attempt will be done if client looses connection to broker.
            Default: 1000 ms
            </summary>
        </member>
        <member name="T:Datalayer.DLR_RESULT">
            <summary>
            DLR_RESULT
            </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_OK">
            <summary>
            Function call succeeded
            </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_FAILED">
            <summary>
            Function call failed
            </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_INVALID_ADDRESS">
            <summary>
            Address not found, address invalid (browse of this node not possible, write -> address not valid)
            </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_UNSUPPORTED">
            <summary>
            Function not implemented
            </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_OUT_OF_MEMORY">
            <summary>
            Out of memory or resources (RAM, sockets, handles, disk space ...).
            </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_LIMIT_MIN">
            <summary>
            The minimum of a limitation is exceeded.
            </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_LIMIT_MAX">
            <summary>
            The maximum of a limitation is exceeded.
            </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_TYPE_MISMATCH">
            <summary>
            Wrong flatbuffer type, wrong data type
            </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_SIZE_MISMATCH">
            <summary>
            Size mismatch, present size doesn't match requested size.
            </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_INVALID_FLOATINGPOINT">
            <summary>
            Invalid floating point number.
            </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_INVALID_HANDLE">
             <summary>
            Invalid handle argument or NULL pointer argument.
             </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_INVALID_OPERATION_MODE">
            <summary>
            Not accessible due to invalid operation mode (write not possible)
            </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_INVALID_CONFIGURATION">
            <summary>
            Mismatch of this value with other configured values
            </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_INVALID_VALUE">
            <summary>
            Invalid value
            </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_SUBMODULE_FAILURE">
            <summary>
            Error in submodule
            </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_TIMEOUT">
            <summary>
            Request timeout
            </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_ALREADY_EXISTS">
            <summary>
            Create: resource already exists
            </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_CREATION_FAILED">
            <summary>
            Error during creation
            </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_VERSION_MISMATCH">
            <summary>
            Version conflict
            </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_DEPRECATED">
            <summary>
            Deprecated - function not longer supported
            </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_PERMISSION_DENIED">
            <summary>
            Request declined due to missing permission rights
            </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_NOT_INITIALIZED">
            <summary>
            Object not initialized yet
            </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_COMM_PROTOCOL_ERROR">
            <summary>
            Internal protocol error
            </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_COMM_INVALID_HEADER">
            <summary>
            Internal header mismatch
            </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_CLIENT_NOT_CONNECTED">
            <summary>
            Client not connected
            </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_RT_NOTOPEN">
            <summary>
            RT not open
            </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_RT_INVALIDOBJECT">
            <summary>
            RT invalid object 
            </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_RT_WRONGREVISON">
            <summary>
            RT wrong memory revision
            </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_RT_NOVALIDDATA">
            <summary>
            RT no valid data 
            </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_RT_MEMORYLOCKED">
            <summary>
            RT memory already locked
            </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_RT_INVALIDMEMORYMAP">
            <summary>
            RT invalid memory map
            </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_RT_INVALID_RETAIN">
            <summary>
            RT invalid retain
            </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_RT_INTERNAL_ERROR">
            <summary>
            RT internal error
            </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_SEC_NOTOKEN">
            <summary>
            No token found
            </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_SEC_INVALIDSESSION">
            <summary>
            Token not valid (session not found)
            </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_SEC_INVALIDTOKENCONTENT">
            <summary>
            Token has wrong content
            </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_SEC_UNAUTHORIZED">
            <summary>
            Unauthorized
            </summary>
        </member>
        <member name="F:Datalayer.DLR_RESULT.DL_SEC_PAYMENT_REQUIRED">
            <summary>
            Payment required
            </summary>
        </member>
        <member name="T:Datalayer.DLR_VARIANT_TYPE">
            <summary>
            DLR_VARIANT_TYPE
            </summary>
        </member>
        <member name="F:Datalayer.DLR_VARIANT_TYPE.DLR_VARIANT_TYPE_UNKNOWN">
            <summary>
            Unknown datatype
            </summary>
        </member>
        <member name="F:Datalayer.DLR_VARIANT_TYPE.DLR_VARIANT_TYPE_BOOL8">
            <summary>
            Bool 8 bit
            </summary>
        </member>
        <member name="F:Datalayer.DLR_VARIANT_TYPE.DLR_VARIANT_TYPE_INT8">
            <summary>
            Signed int 8 bit
            </summary>
        </member>
        <member name="F:Datalayer.DLR_VARIANT_TYPE.DLR_VARIANT_TYPE_UINT8">
            <summary>
            Unsigned int 8 bit
            </summary>
        </member>
        <member name="F:Datalayer.DLR_VARIANT_TYPE.DLR_VARIANT_TYPE_INT16">
            <summary>
            Signed int 16 bit
            </summary>
        </member>
        <member name="F:Datalayer.DLR_VARIANT_TYPE.DLR_VARIANT_TYPE_UINT16">
            <summary>
            Unsigned int 16 bit
            </summary>
        </member>
        <member name="F:Datalayer.DLR_VARIANT_TYPE.DLR_VARIANT_TYPE_INT32">
            <summary>
            Signed int 32 bit
            </summary>
        </member>
        <member name="F:Datalayer.DLR_VARIANT_TYPE.DLR_VARIANT_TYPE_UINT32">
            <summary>
            Unsigned int 32 bit
            </summary>
        </member>
        <member name="F:Datalayer.DLR_VARIANT_TYPE.DLR_VARIANT_TYPE_INT64">
            <summary>
            Signed int 64 bit
            </summary>
        </member>
        <member name="F:Datalayer.DLR_VARIANT_TYPE.DLR_VARIANT_TYPE_UINT64">
            <summary>
            Unsigned int 64 bit
            </summary>
        </member>
        <member name="F:Datalayer.DLR_VARIANT_TYPE.DLR_VARIANT_TYPE_FLOAT32">
            <summary>
            Float 32 bit
            </summary>
        </member>
        <member name="F:Datalayer.DLR_VARIANT_TYPE.DLR_VARIANT_TYPE_FLOAT64">
            <summary>
            Float 64 bit
            </summary>
        </member>
        <member name="F:Datalayer.DLR_VARIANT_TYPE.DLR_VARIANT_TYPE_STRING">
            <summary>
            String (UTF-8)
            </summary>
        </member>
        <member name="F:Datalayer.DLR_VARIANT_TYPE.DLR_VARIANT_TYPE_ARRAY_OF_BOOL8">
            <summary>
            Array of bool 8 bit
            </summary>
        </member>
        <member name="F:Datalayer.DLR_VARIANT_TYPE.DLR_VARIANT_TYPE_ARRAY_OF_INT8">
            <summary>
            Array of Signed int 8 bit
            </summary>
        </member>
        <member name="F:Datalayer.DLR_VARIANT_TYPE.DLR_VARIANT_TYPE_ARRAY_OF_UINT8">
            <summary>
            Array of Unsigned int 8 bit
            </summary>
        </member>
        <member name="F:Datalayer.DLR_VARIANT_TYPE.DLR_VARIANT_TYPE_ARRAY_OF_INT16">
            <summary>
            Array of Signed int 16 bit
            </summary>
        </member>
        <member name="F:Datalayer.DLR_VARIANT_TYPE.DLR_VARIANT_TYPE_ARRAY_OF_UINT16">
            <summary>
            Array of Unsigned int 16 bit
            </summary>
        </member>
        <member name="F:Datalayer.DLR_VARIANT_TYPE.DLR_VARIANT_TYPE_ARRAY_OF_INT32">
            <summary>
            Array of Signed int 32 bit
            </summary>
        </member>
        <member name="F:Datalayer.DLR_VARIANT_TYPE.DLR_VARIANT_TYPE_ARRAY_OF_UINT32">
            <summary>
            Array of Unsigned int 32 bit
            </summary>
        </member>
        <member name="F:Datalayer.DLR_VARIANT_TYPE.DLR_VARIANT_TYPE_ARRAY_OF_INT64">
            <summary>
            Array of Signed int 64 bit
            </summary>
        </member>
        <member name="F:Datalayer.DLR_VARIANT_TYPE.DLR_VARIANT_TYPE_ARRAY_OF_UINT64">
            <summary>
            Array of Unsigned int 64 bit
            </summary>
        </member>
        <member name="F:Datalayer.DLR_VARIANT_TYPE.DLR_VARIANT_TYPE_ARRAY_OF_FLOAT32">
            <summary>
            Array of float 32 bit
            </summary>
        </member>
        <member name="F:Datalayer.DLR_VARIANT_TYPE.DLR_VARIANT_TYPE_ARRAY_OF_FLOAT64">
            <summary>
            Array of float 64 bit
            </summary>
        </member>
        <member name="F:Datalayer.DLR_VARIANT_TYPE.DLR_VARIANT_TYPE_ARRAY_OF_STRING">
            <summary>
            Array of string (UTF-8)
            </summary>
        </member>
        <member name="F:Datalayer.DLR_VARIANT_TYPE.DLR_VARIANT_TYPE_RAW">
            <summary>
            Raw bytes
            </summary>
        </member>
        <member name="F:Datalayer.DLR_VARIANT_TYPE.DLR_VARIANT_TYPE_FLATBUFFERS">
            <summary>
            Bytes as a complex data type encoded as a flatbuffer
            </summary>
        </member>
        <member name="F:Datalayer.DLR_VARIANT_TYPE.DLR_VARIANT_TYPE_TIMESTAMP">
            <summary>
            Timestamp (FILETIME) 64 bit 100ns since 1.1.1601 (UTC)
            </summary>
        </member>
        <member name="F:Datalayer.DLR_VARIANT_TYPE.DLR_VARIANT_TYPE_ARRAY_OF_TIMESTAMP">
            <summary>
            Array of Timestamp (FILETIME) 64 bit 100ns since 1.1.1601 (UTC)
            </summary>
        </member>
        <member name="T:Datalayer.IClient">
            <summary>
            The client interface.
            </summary>
        </member>
        <member name="P:Datalayer.IClient.System">
            <summary>
            Gets the system.
            </summary>
        </member>
        <member name="P:Datalayer.IClient.IsConnected">
            <summary>
            Checks the connection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="P:Datalayer.IClient.AuthToken">
            <summary>
            Gets the authentication token (JWT) as string.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.InvalidOperationException">Operation not allowed.</exception>
        </member>
        <member name="M:Datalayer.IClient.SetTimeout(Datalayer.DLR_TIMEOUT_SETTING,System.UInt32)">
            <summary>
            Sets the timeout of each request.
            </summary>
            <param name="timeout">Timeout to set.</param>
            <param name="value">Value to set.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.IClient.Ping">
            <summary>
            Pings the remote.
            </summary>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.IClient.PingAsync">
            <summary>
            Pings the remote asynchronously.
            </summary>        
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.IClient.Read(System.String)">
            <summary>
            Reads a node value.
            </summary>
            <param name="address">Address of the node.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.IClient.ReadAsync(System.String)">
            <summary>
            Reads a node value asynchronously.
            </summary>
            <param name="address">Address of the node.</param>    
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.IClient.ReadAsync(System.String,Datalayer.IVariant)">
            <summary>
            Reads a node value with arguments asynchronously.
            </summary>
            <param name="address">Address of the node.</param>
            <param name="args">Request arguments.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.IClient.Read(System.String,Datalayer.IVariant)">
            <summary>
            Reads a node value with arguments.
            </summary>
            <param name="address">Address of the node.</param>
            <param name="args">Request arguments.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.IClient.ReadMulti(System.String[])">
            <summary>
            Reads a list of node values
            </summary>
            <param name="addresses">Address of the node.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.IClient.ReadMultiAsync(System.String[])">
            <summary>
            Reads a list of node values asynchronously.
            </summary>
            <param name="addresses">Addresses of the nodes.</param>    
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.IClient.ReadJson(System.String,System.Int32)">
            <summary>
            Reads a node value as JSON.
            </summary>
            <param name="address">Address of the node.</param>
            <param name="indentStep">Indentation length for json string.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.IClient.ReadJsonAsync(System.String,System.Int32)">
            <summary>
            Reads a node value as JSON asynchronously.
            </summary>
            <param name="address">Address of the node.</param>
            <param name="indentStep">Indentation length for json string.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.IClient.ReadMetadata(System.String)">
            <summary>
            Reads the metadata of a node.
            </summary>
            <param name="address">Address of the node.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.IClient.ReadMetadataAsync(System.String)">
            <summary>
            Reads the metadata of a node asynchronously.
            </summary>
            <param name="address">Address of the node.</param>  
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.IClient.Write(System.String,Datalayer.IVariant)">
            <summary>
            Writes the value to a node.
            </summary>
            <param name="address">Address of the node.</param>
            <param name="writeValue">Value to write.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.IClient.WriteAsync(System.String,Datalayer.IVariant)">
            <summary>
            Writes a value to a node asynchronously.
            </summary>
            <param name="address">Address of the node.</param>
            <param name="writeValue">Value to set.</param> 
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.IClient.WriteMulti(System.String[],Datalayer.IVariant[])">
            <summary>
            Writes a list of values to a list of nodes.
            </summary>
            <param name="addresses">Addresses of the nodes.</param>
            <param name="writeValues">Values to write.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
            <exception cref="T:System.ArgumentException">Invalid arguments.</exception>
        </member>
        <member name="M:Datalayer.IClient.WriteMultiAsync(System.String[],Datalayer.IVariant[])">
            <summary>
            Writes a list of values to a list of nodes asynchronously.
            </summary>
            <param name="addresses">Addresses of the nodes.</param>
            <param name="writeValues">Values to write.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
            <exception cref="T:System.ArgumentException">Invalid arguments.</exception>
        </member>
        <member name="M:Datalayer.IClient.WriteJson(System.String,System.String)">
            <summary>
            Writes a JSON value to a node.
            </summary>
            <param name="address">Address of the node.</param>
            <param name="json">JSON value to write.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.IClient.WriteJsonAsync(System.String,System.String)">
            <summary>
             Writes a JSON value to a node asynchronously.
            </summary>
            <param name="address">Address of the node.</param>
            <param name="json">JSON value to write.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.IClient.Browse(System.String)">
            <summary>
            Browses a node.
            </summary>
            <param name="address">Address of the node.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.IClient.BrowseAsync(System.String)">
            <summary>
            Browses a node asynchronously.
            </summary>
            <param name="address">Address of the node.</param>     
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.IClient.Create(System.String,Datalayer.IVariant)">
            <summary>
            Creates a node with arguments.
            </summary>
            <param name="address">Address of the node.</param>
            <param name="args">Request arguments.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.IClient.CreateAsync(System.String,Datalayer.IVariant)">
            <summary>
            Creates a node with arguments asynchronously.
            </summary>
            <param name="address">Address of the node.</param>
            <param name="args">Request arguments.</param>      
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
            <example>
            <b>Example</b>
            <code>      
            var userData = new Variant(42);      
            var task = client.CreateAsync(string, userData);
            </code>
            </example>
        </member>
        <member name="M:Datalayer.IClient.Remove(System.String)">
            <summary>
            Removes a node.
            </summary>
            <param name="address">Address of the node.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.IClient.RemoveAsync(System.String)">
            <summary>
            Removes a node asynchronously.
            </summary>
            <param name="address">Address of the node.</param>      
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.IClient.CreateSubscription(Datalayer.IVariant,System.Object)">
            <summary>
            Creates a subscription.
            </summary> 
            <param name="subscriptionPropertiesFlatbuffers">Properties of the subscription as flatbuffers.</param>
            <param name="userData">Optional user data can be provided, which is available in the subscription data changed event context.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.IClient.CreateSubscriptionAsync(Datalayer.IVariant,System.Object)">
            <summary>
            Creates an subscription asynchronously.
            </summary>
            <param name="subscriptionPropertiesFlatbuffers">Properties of the subscription as flatbuffers.</param>
            <param name="userData">Optional user data can be provided, which is available in the subscription data changed event context.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
            <example>
            <b>Example</b>
            <code>       
            var userData = new Variant(42);
            var builder = new FlatBufferBuilder(Variant.DefaultFlatbuffersInitialSize);
            var properties = SubscriptionProperties.CreateSubscriptionProperties(
               builder: builder,
               idOffset: builder.CreateString("mySubscription"),
               keepaliveInterval: KeepLiveIntervalMillis,
               publishInterval: PublishIntervalMillis,
               rulesOffset: default,
               errorInterval: ErrorIntervalMillis);
            builder.Finish(properties.Value);
            var propertiesFlatbuffers = new Variant(builder);
            var task = client.CreateSubscriptionAsync(propertiesFlatbuffers, userData);
            </code>
            </example> 
        </member>
        <member name="T:Datalayer.IClientAsyncResult">
            <summary>
            The result of the asynchronous client request.
            </summary>
        </member>
        <member name="P:Datalayer.IClientAsyncResult.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:Datalayer.IClientAsyncResult.Result">
            <summary>
            Gets the result.
            </summary>
        </member>
        <member name="T:Datalayer.IConverter">
            <summary>
            The converter interface.
            </summary>
        </member>
        <member name="M:Datalayer.IConverter.GenerateJsonSimple(Datalayer.IVariant,System.Int32)">
            <summary>
            Generates a JSON string out of a simple data type Variant.
            </summary>
            <param name="value">Value to set.</param>
            <param name="indentStep">Indentation length for json string.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.IConverter.GenerateJsonComplex(Datalayer.IVariant,Datalayer.IVariant,System.Int32)">
            <summary>
            Generates a JSON string out of a complex data type Variant.
            </summary>
            <param name="valueFlatbuffers">Value of the complex data type (flatbuffers).</param>
            <param name="typeFlatbuffers">Variant which contains the type of data (flatbuffers).</param>
            <param name="indentStep">Indentation length for json string.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.IConverter.ParseJsonSimple(System.String)">
            <summary>
            Parses a JSON string out of a simple data type Variant.
            </summary>
            <param name="json">Data of the Variant as a json string.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.IConverter.ParseJsonComplex(System.String,Datalayer.IVariant)">
            <summary>
            Parses a JSON string out of a complex data type Variant.
            </summary>
            <param name="json">Data of the Variant as a json string.</param>
            <param name="typeFlatbuffers">Variant which contains the type of data (flatbuffers).</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.IConverter.GetSchema(Datalayer.DLR_SCHEMA)">
            <summary>
            Gets the schema
            </summary>
            <param name="schema">Requested schema.</param>
            <returns>Result of the method call.</returns>
        </member>
        <member name="T:Datalayer.IDataChangedEventArgs">
            <summary>
            The subscription's data changed event interface
            </summary>
        </member>
        <member name="P:Datalayer.IDataChangedEventArgs.Result">
            <summary>
            Gets the result.
            </summary>
        </member>
        <member name="P:Datalayer.IDataChangedEventArgs.Item">
            <summary>
            Gets the item.
            </summary>
        </member>
        <member name="P:Datalayer.IDataChangedEventArgs.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:Datalayer.IDataChangedEventArgs.UserData">
            <summary>
            Gets the user data.
            </summary>
        </member>
        <member name="T:Datalayer.IDatalayerSystem">
            <summary>
            The datalayer system interface.
            </summary>
        </member>
        <member name="P:Datalayer.IDatalayerSystem.IpcPath">
            <summary>
            Gets the interprocess communication path.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="P:Datalayer.IDatalayerSystem.IsStarted">
            <summary>
            Checks if the DatalayerSystem is started.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.IDatalayerSystem.Start(System.Boolean)">
            <summary>
            Starts the DatalayerSystem.
            </summary>
            <param name="startBroker">Use true to start a broker. If you are a user of the ctrlX Data Layer, set to false.</param>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <example>
            <b>Example</b>
            <code>
            using var system = new DatalayerSystem();
            system.Start(startBroker: false);
            </code>
            </example>
        </member>
        <member name="M:Datalayer.IDatalayerSystem.Stop">
            <summary>
            Stops the DatalayerSystem.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="P:Datalayer.IDatalayerSystem.Factory">
            <summary>
            Gets the Factory to create Clients and Providers.
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.InvalidOperationException">Operation not allowed.</exception>
            </summary>
        </member>
        <member name="P:Datalayer.IDatalayerSystem.Converter">
            <summary>
            Gets the Converter for Variant to JSON conversions.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="P:Datalayer.IDatalayerSystem.BfbsPath">
            <summary>
            Sets the binary Flatbuffer path, which contains *.bfbs files.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="T:Datalayer.IFactory">
            <summary>
            The factory interface.
            </summary>
        </member>
        <member name="M:Datalayer.IFactory.CreateClient(System.String)">
            <summary>
            Creates a ctrlX Data Layer client.
            </summary>
            <param name="remote">Remote address of the ctrlX Data Layer</param>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
            <returns>The created client</returns>
        </member>
        <member name="M:Datalayer.IFactory.CreateProvider(System.String)">
            <summary>
            Creates a ctrlX Data Layer provider.
            </summary>
            <param name="remote">Remote address of the ctrlX Data Layer</param>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
            <returns>The created provider</returns>
        </member>
        <member name="T:Datalayer.INativeDisposable">
            <summary>
            The native disposable interface
            </summary>
        </member>
        <member name="P:Datalayer.INativeDisposable.IsDisposed">
            <summary>
            Checks disposed
            </summary>
        </member>
        <member name="T:Datalayer.INotifyItem">
            <summary>
            The notify item interface
            </summary>
        </member>
        <member name="P:Datalayer.INotifyItem.Value">
            <summary>
            Gets the value
            </summary>
        </member>
        <member name="P:Datalayer.INotifyItem.Info">
            <summary>
            Gets the info
            </summary>
        </member>
        <member name="T:Datalayer.Internal.Client">
            <summary>
            Client implementation
            </summary>
        </member>
        <member name="M:Datalayer.Internal.Client.#ctor(Datalayer.IDatalayerSystem,System.Void*)">
            <summary>
            Initializes a new instance of Client.
            </summary>
            <param name="system">The DatalayerSystem.</param>
            <param name="nativePtr">The pointer to the underlying native API object.</param>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="P:Datalayer.Internal.Client.Datalayer#Internal#INative#NativePtr">
            <summary>
            Gets the pointer to the underlying native API object.
            </summary>
        </member>
        <member name="P:Datalayer.Internal.Client.IsDisposed">
            <summary>
            Gets a value that indicates whether the instance is disposed.
            </summary>
        </member>
        <member name="M:Datalayer.Internal.Client.Dispose(System.Boolean)">
            <summary>
            Disposes the instance.
            </summary>
            <param name="disposing">False if called by Finalizer, else true.</param>
        </member>
        <member name="M:Datalayer.Internal.Client.Finalize">
            <summary>
            override finalizer only if 'Dispose(bool disposing)' has code to free unmanaged resources
            </summary>
        </member>
        <member name="M:Datalayer.Internal.Client.Dispose">
            <summary>
            Disposes the instance
            </summary>
        </member>
        <member name="M:Datalayer.Internal.Client.Delete">
            <summary>
            Deletes the underlying native API object(s)
            </summary>
        </member>
        <member name="M:Datalayer.Internal.Client.DeleteChildren">
            <summary>
            Deletes the children (subscriptions)
            </summary>
        </member>
        <member name="P:Datalayer.Internal.Client.System">
            <summary>
            Gets the system.
            </summary>
        </member>
        <member name="P:Datalayer.Internal.Client.IsConnected">
            <summary>
            Checks the connection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="P:Datalayer.Internal.Client.AuthToken">
            <summary>
            Gets the authentication token (JWT) as string.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.InvalidOperationException">Operation not allowed.</exception>
        </member>
        <member name="M:Datalayer.Internal.Client.SetTimeout(Datalayer.DLR_TIMEOUT_SETTING,System.UInt32)">
            <summary>
            Sets the timeout of each request.
            </summary>
            <param name="timeout">Timeout to set.</param>
            <param name="value">Value to set.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.Internal.Client.Ping">
            <summary>
            Pings the remote.
            </summary>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.Internal.Client.PingAsync">
            <summary>
            Pings the remote asynchronously.
            </summary>        
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.Internal.Client.Read(System.String)">
            <summary>
            Reads a node value.
            </summary>
            <param name="address">Address of the node.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.Internal.Client.Read(System.String,Datalayer.IVariant)">
            <summary>
            Reads a node value with arguments.
            </summary>
            <param name="address">Address of the node.</param>
            <param name="args">Request arguments.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.Internal.Client.ReadAsync(System.String)">
            <summary>
            Reads a node value asynchronously.
            </summary>
            <param name="address">Address of the node.</param>    
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.Internal.Client.ReadAsync(System.String,Datalayer.IVariant)">
            <summary>
            Reads a node value with arguments asynchronously.
            </summary>
            <param name="address">Address of the node.</param>
            <param name="args">Request arguments.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.Internal.Client.ReadMulti(System.String[])">
            <summary>
            Reads a list of node values
            </summary>
            <param name="addresses">Address of the node.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.Internal.Client.ReadMultiAsync(System.String[])">
            <summary>
            Reads a list of node values asynchronously.
            </summary>
            <param name="addresses">Addresses of the nodes.</param>    
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.Internal.Client.ReadJson(System.String,System.Int32)">
            <summary>
            Reads a node value as JSON.
            </summary>
            <param name="address">Address of the node.</param>
            <param name="indentStep">Indentation length for json string.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.Internal.Client.ReadJsonAsync(System.String,System.Int32)">
            <summary>
            Reads a node value as JSON asynchronously.
            </summary>
            <param name="address">Address of the node.</param>
            <param name="indentStep">Indentation length for json string.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.Internal.Client.ReadMetadata(System.String)">
            <summary>
            Reads the metadata of a node.
            </summary>
            <param name="address">Address of the node.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.Internal.Client.ReadMetadataAsync(System.String)">
            <summary>
            Reads the metadata of a node asynchronously.
            </summary>
            <param name="address">Address of the node.</param>  
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.Internal.Client.Create(System.String,Datalayer.IVariant)">
            <summary>
            Creates a node with arguments.
            </summary>
            <param name="address">Address of the node.</param>
            <param name="args">Request arguments.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.Internal.Client.CreateAsync(System.String,Datalayer.IVariant)">
            <summary>
            Creates a node with arguments asynchronously.
            </summary>
            <param name="address">Address of the node.</param>
            <param name="args">Request arguments.</param>      
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
            <example>
            <b>Example</b>
            <code>      
            var userData = new Variant(42);      
            var task = client.CreateAsync(string, userData);
            </code>
            </example>
        </member>
        <member name="M:Datalayer.Internal.Client.Remove(System.String)">
            <summary>
            Removes a node.
            </summary>
            <param name="address">Address of the node.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.Internal.Client.RemoveAsync(System.String)">
            <summary>
            Removes a node asynchronously.
            </summary>
            <param name="address">Address of the node.</param>      
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.Internal.Client.Write(System.String,Datalayer.IVariant)">
            <summary>
            Writes the value to a node.
            </summary>
            <param name="address">Address of the node.</param>
            <param name="writeValue">Value to write.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.Internal.Client.WriteJson(System.String,System.String)">
            <summary>
            Writes a JSON value to a node.
            </summary>
            <param name="address">Address of the node.</param>
            <param name="json">JSON value to write.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.Internal.Client.WriteJsonAsync(System.String,System.String)">
            <summary>
            Writes a JSON value to a node.
            </summary>
            <param name="address">Address of the node.</param>
            <param name="json">JSON value to write.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.Internal.Client.WriteMulti(System.String[],Datalayer.IVariant[])">
            <summary>
            Writes a list of values to a list of nodes.
            </summary>
            <param name="addresses">Addresses of the nodes.</param>
            <param name="writeValues">Values to write.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
            <exception cref="T:System.ArgumentException">Invalid arguments.</exception>
        </member>
        <member name="M:Datalayer.Internal.Client.WriteMultiAsync(System.String[],Datalayer.IVariant[])">
            <summary>
            Writes a list of values to a list of nodes asynchronously.
            </summary>
            <param name="addresses">Addresses of the nodes.</param>
            <param name="writeValues">Values to write.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
            <exception cref="T:System.ArgumentException">Invalid arguments.</exception>
        </member>
        <member name="M:Datalayer.Internal.Client.WriteAsync(System.String,Datalayer.IVariant)">
            <summary>
            Writes a value to a node asynchronously.
            </summary>
            <param name="address">Address of the node.</param>
            <param name="writeValue">Value to set.</param> 
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.Internal.Client.Browse(System.String)">
            <summary>
            Browses a node.
            </summary>
            <param name="address">Address of the node.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Internal.Client.BrowseAsync(System.String)">
            <summary>
            Browses a node asynchronously.
            </summary>
            <param name="address">Address of the node.</param>     
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.Internal.Client.CreateSubscription(Datalayer.IVariant,System.Object)">
            <summary>
            Creates a subscription.
            </summary> 
            <param name="subscriptionPropertiesFlatbuffers">Properties of the subscription as flatbuffers.</param>
            <param name="userData">Optional user data can be provided, which is available in the subscription data changed event context.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.Internal.Client.CreateSubscriptionAsync(Datalayer.IVariant,System.Object)">
            <summary>
            Creates an subscription asynchronously.
            </summary>
            <param name="subscriptionPropertiesFlatbuffers">Properties of the subscription as flatbuffers.</param>
            <param name="userData">Optional user data can be provided, which is available in the subscription data changed event context.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
            <example>
            <b>Example</b>
            <code>       
            var userData = new Variant(42);
            var builder = new FlatBufferBuilder(Variant.DefaultFlatbuffersInitialSize);
            var properties = SubscriptionProperties.CreateSubscriptionProperties(
               builder: builder,
               idOffset: builder.CreateString("mySubscription"),
               keepaliveInterval: KeepLiveIntervalMillis,
               publishInterval: PublishIntervalMillis,
               rulesOffset: default,
               errorInterval: ErrorIntervalMillis);
            builder.Finish(properties.Value);
            var propertiesFlatbuffers = new Variant(builder);
            var task = client.CreateSubscriptionAsync(propertiesFlatbuffers, userData);
            </code>
            </example> 
        </member>
        <member name="T:Datalayer.Internal.Converter">
            <summary>
            Converter implementation
            </summary>
        </member>
        <member name="M:Datalayer.Internal.Converter.#ctor(System.Void*)">
            <summary>
            Initializes a new instance of Converter.
            </summary>
            <param name="nativePtr">The pointer to underlying native API object.</param>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="P:Datalayer.Internal.Converter.Datalayer#Internal#INative#NativePtr">
            <summary>
            Gets the pointer to the underlying native API object.
            </summary>
        </member>
        <member name="M:Datalayer.Internal.Converter.GenerateJsonSimple(Datalayer.IVariant,System.Int32)">
            <summary>
            Generates a JSON string out of a simple data type Variant.
            </summary>
            <param name="value">Value to set.</param>
            <param name="indentStep">Indentation length for json string.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.Internal.Converter.GenerateJsonComplex(Datalayer.IVariant,Datalayer.IVariant,System.Int32)">
            <summary>
            Generates a JSON string out of a complex data type Variant.
            </summary>
            <param name="valueFlatbuffers">Value of the complex data type (flatbuffers).</param>
            <param name="typeFlatbuffers">Variant which contains the type of data (flatbuffers).</param>
            <param name="indentStep">Indentation length for json string.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.Internal.Converter.ParseJsonSimple(System.String)">
            <summary>
            Parses a JSON string out of a simple data type Variant.
            </summary>
            <param name="json">Data of the Variant as a json string.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.Internal.Converter.ParseJsonComplex(System.String,Datalayer.IVariant)">
            <summary>
            Parses a JSON string out of a complex data type Variant.
            </summary>
            <param name="json">Data of the Variant as a json string.</param>
            <param name="typeFlatbuffers">Variant which contains the type of data (flatbuffers).</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.Internal.Converter.GetSchema(Datalayer.DLR_SCHEMA)">
            <summary>
            Gets the schema
            </summary>
            <param name="schema">Requested schema.</param>
            <returns>Result of the method call.</returns>
        </member>
        <member name="T:Datalayer.Internal.DataChangedEventArgs">
            <summary>
            DataChangedEventArgs implementation
            </summary>
        </member>
        <member name="M:Datalayer.Internal.DataChangedEventArgs.#ctor(Datalayer.DLR_RESULT,Datalayer.INotifyItem,System.UInt32,System.Object)">
            <summary>
            Initializes a new instance of DataChangedEventArgs.
            </summary>
            <param name="result">The result.</param>
            <param name="item">The item.</param>
            <param name="count">The count.</param>
            <param name="userData">The user data.</param>
        </member>
        <member name="P:Datalayer.Internal.DataChangedEventArgs.Result">
            <summary>
            Gets the result
            </summary>
        </member>
        <member name="P:Datalayer.Internal.DataChangedEventArgs.Item">
            <summary>
            Gets the item
            </summary>
        </member>
        <member name="P:Datalayer.Internal.DataChangedEventArgs.Count">
            <summary>
            Gets the count
            </summary>
        </member>
        <member name="P:Datalayer.Internal.DataChangedEventArgs.UserData">
            <summary>
            Gets the user data
            </summary>
        </member>
        <member name="T:Datalayer.Internal.Factory">
            <summary>
            Factory implementation
            </summary>
        </member>
        <member name="M:Datalayer.Internal.Factory.#ctor(Datalayer.DatalayerSystem,System.Void*)">
            <summary>
            
            </summary>
            <param name="system"></param>
            <param name="nativePtr"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Datalayer.Internal.Factory.Datalayer#Internal#INative#NativePtr">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datalayer.Internal.Factory.CreateClient(System.String)">
            <summary>
            
            </summary>
            <param name="remote"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Datalayer.Internal.Factory.CreateProvider(System.String)">
            <summary>
            
            </summary>
            <param name="remote"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Datalayer.Internal.INative">
            <summary>
            Interface for ANSI-C API backed classes holding a native pointer
            </summary>
        </member>
        <member name="P:Datalayer.Internal.INative.NativePtr">
            <summary>
            The pointer to the underlying native API object.
            </summary>
            <returns>The pointer to the underlying native API object.</returns>
        </member>
        <member name="T:Datalayer.Internal.Provider">
            <summary>
            Provider implementation
            </summary>
        </member>
        <member name="M:Datalayer.Internal.Provider.#ctor(Datalayer.IDatalayerSystem,System.Void*)">
            <summary>
            Initializes a new instance of Provider.
            </summary>
            <param name="system">The parent DatalayerSystem.</param>
            <param name="nativePtr">The pointer to the underlying native API object.</param>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="P:Datalayer.Internal.Provider.Datalayer#Internal#INative#NativePtr">
            <summary>
            Gets the pointer to the underlying native API object.
            </summary>
        </member>
        <member name="P:Datalayer.Internal.Provider.IsDisposed">
            <summary>
            Gets a value that indicates whether the instance is disposed.
            </summary>
        </member>
        <member name="M:Datalayer.Internal.Provider.Dispose(System.Boolean)">
            <summary>
            Disposes the instance.
            </summary>
            <param name="disposing">False if called by Finalizer, else true.</param>
        </member>
        <member name="M:Datalayer.Internal.Provider.Finalize">
            <summary>
            override finalizer only if 'Dispose(bool disposing)' has code to free unmanaged resources
            </summary>
        </member>
        <member name="M:Datalayer.Internal.Provider.Dispose">
            <summary>
            Disposes the instance
            </summary>
        </member>
        <member name="M:Datalayer.Internal.Provider.Delete">
            <summary>
            Deletes the underlying native API object(s)
            </summary>
        </member>
        <member name="P:Datalayer.Internal.Provider.System">
            <summary>
            Gets the system.
            </summary>
        </member>
        <member name="P:Datalayer.Internal.Provider.AuthToken">
            <summary>
            Gets the authentication token (JWT) as flatbuffers 'Token' while processing requests. 
            </summary>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.InvalidOperationException">Operation not allowed.</exception>
        </member>
        <member name="P:Datalayer.Internal.Provider.IsConnected">
            <summary>
            Checks the connection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.Internal.Provider.RegisterType(System.String,System.String)">
            <summary>
            Registers the type to the ctrlX Data Layer.
            </summary>
            <param name="address">Address of the node.</param>
            <param name="bfbsPath">Path to flatbuffers type binary bfbs file.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Internal.Provider.RegisterTypeVariant(System.String,Datalayer.IVariant)">
            <summary>
            Registers the type to the ctrlX Data Layer.
            </summary>
            <param name="address">Address of the node.</param>
            <param name="flatbuffers">Variant with flatbuffers type.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Internal.Provider.UnregisterType(System.String)">
            <summary>
            Unregisters the type from the ctrlX Data Layer.
            </summary>
            <param name="address">Address of the node.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Internal.Provider.RegisterNode(System.String,Datalayer.IProviderNodeHandler)">
            <summary>
            Registers the node to the ctrlX Data Layer.
            </summary>
            <param name="address">Address of the node.</param>
            <param name="handler">Reference to the node handler.</param>
            <returns>The corresponding provider node.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Internal.Provider.UnregisterNode(System.String)">
            <summary>
            Unregisters the node from the ctrlX Data Layer.
            </summary>
            <param name="address">Address of the node.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Internal.Provider.Start">
            <summary>
            Starts the provider.
            </summary>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Datalayer.Internal.Provider.Stop" -->
        <member name="T:Datalayer.Internal.ProviderNode">
            <summary>
            ProviderNode implementation
            </summary>
        </member>
        <member name="M:Datalayer.Internal.ProviderNode.#ctor(Datalayer.IProvider,Datalayer.IProviderNodeHandler)">
            <summary>
            Initializes a new instance of Provider.
            </summary>
            <param name="provider">The provider.</param>
            <param name="handler">The provider node handler.</param>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="P:Datalayer.Internal.ProviderNode.Datalayer#Internal#INative#NativePtr">
            <summary>
            Gets the pointer to the underlying native API object.
            </summary>
        </member>
        <member name="P:Datalayer.Internal.ProviderNode.IsDisposed">
            <summary>
            Gets a value that indicates whether the instance is disposed.
            </summary>
        </member>
        <member name="M:Datalayer.Internal.ProviderNode.Dispose(System.Boolean)">
            <summary>
            Disposes the instance.
            </summary>
            <param name="disposing">False if called by Finalizer, else true.</param>
        </member>
        <member name="M:Datalayer.Internal.ProviderNode.Finalize">
            <summary>
            override finalizer only if 'Dispose(bool disposing)' has code to free unmanaged resources
            </summary>
        </member>
        <member name="M:Datalayer.Internal.ProviderNode.Dispose">
            <summary>
            Disposes the instance
            </summary>
        </member>
        <member name="M:Datalayer.Internal.ProviderNode.Delete">
            <summary>
            Deletes the underlying native API object(s)
            </summary>
        </member>
        <member name="P:Datalayer.Internal.ProviderNode.Handler">
            <summary>
            Gets the handler.
            </summary>
        </member>
        <member name="P:Datalayer.Internal.ProviderNode.Provider">
            <summary>
            Gets the provider.
            </summary>
        </member>
        <member name="M:Datalayer.Internal.ProviderNode.SetTimeout(System.UInt32)">
            <summary>
            Set timeout for a node for asynchron requests (default value is 10000 ms).
            If the handler method of the provider does not return a response within timeoutMillis, the client will automatically receive bad result DL_TIMEOUT.
            The result after timeout will be discarded.
            </summary>
            <param name="timeoutMillis">Timeout in milliseconds for this node.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Internal.ProviderNode.OnCreateNativeCallback(System.Void*,System.SByte*,System.Void*,Datalayer.NativeMethods.DLR_PROVIDER_NODE_CALLBACK,System.Void*)">
            <summary>
            The onCreate native callback
            </summary>
            <param name="userData">The user data.</param>
            <param name="address">The address.</param>
            <param name="data">The data.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The result of the callback.</returns>
        </member>
        <member name="M:Datalayer.Internal.ProviderNode.OnReadNativeCallback(System.Void*,System.SByte*,System.Void*,Datalayer.NativeMethods.DLR_PROVIDER_NODE_CALLBACK,System.Void*)">
            <summary>
            The onRead native callback
            </summary>
            <param name="userData">The user data.</param>
            <param name="address">The address.</param>
            <param name="data">The data.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The result of the callback.</returns>
        </member>
        <member name="M:Datalayer.Internal.ProviderNode.OnWriteNativeCallback(System.Void*,System.SByte*,System.Void*,Datalayer.NativeMethods.DLR_PROVIDER_NODE_CALLBACK,System.Void*)">
            <summary>
            The onWrite native callback
            </summary>
            <param name="userData">The user data.</param>
            <param name="address">The address.</param>
            <param name="data">The data.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The result of the callback.</returns>
        </member>
        <member name="M:Datalayer.Internal.ProviderNode.OnRemoveNativeCallback(System.Void*,System.SByte*,Datalayer.NativeMethods.DLR_PROVIDER_NODE_CALLBACK,System.Void*)">
            <summary>
            The onRemove native callback
            </summary>
            <param name="userData">The user data.</param>
            <param name="address">The address.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The result of the callback.</returns>
        </member>
        <member name="M:Datalayer.Internal.ProviderNode.OnBrowseNativeCallback(System.Void*,System.SByte*,Datalayer.NativeMethods.DLR_PROVIDER_NODE_CALLBACK,System.Void*)">
            <summary>
            The onBrowse native callback
            </summary>
            <param name="userData">The user data.</param>
            <param name="address">The address.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The result of the callback.</returns>
        </member>
        <member name="M:Datalayer.Internal.ProviderNode.OnMetadataNativeCallback(System.Void*,System.SByte*,Datalayer.NativeMethods.DLR_PROVIDER_NODE_CALLBACK,System.Void*)">
            <summary>
            The onMetadata native callback
            </summary>
            <param name="userData">The user data.</param>
            <param name="address">The address.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The result of the callback.</returns>
        </member>
        <member name="T:Datalayer.Internal.ProviderNodeResult">
            <summary>
            ProviderNodeResult implementation
            </summary>
        </member>
        <member name="M:Datalayer.Internal.ProviderNodeResult.#ctor(Datalayer.IProviderNode,Datalayer.NativeMethods.DLR_PROVIDER_NODE_CALLBACK,System.Void*)">
            <summary>
            Initializes a new instance of ProviderNodeResult.
            </summary>
            <param name="providerNode">The provider node.</param>
            <param name="callback">The native callback.</param>
            <param name="callbackContext">The pointer to the callback context.</param>
        </member>
        <member name="P:Datalayer.Internal.ProviderNodeResult.ProviderNode">
            <summary>
            Gets the provider node.
            </summary>
        </member>
        <member name="P:Datalayer.Internal.ProviderNodeResult.Callback">
            <summary>
            Gets the native callback
            </summary>
        </member>
        <member name="P:Datalayer.Internal.ProviderNodeResult.CallbackContext">
            <summary>
            Gets the pointer to the callback context
            </summary>
        </member>
        <member name="M:Datalayer.Internal.ProviderNodeResult.SetResult(Datalayer.DLR_RESULT)">
            <summary>
            Sets the result.
            </summary>
            <param name="result">Result of the request.</param>
        </member>
        <member name="M:Datalayer.Internal.ProviderNodeResult.SetResult(Datalayer.DLR_RESULT,Datalayer.IVariant)">
            <summary>.
            Sets the result
            </summary>
            <param name="result">Result of the request.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="T:Datalayer.Internal.Subscription">
            <summary>
            Subscription implementation
            </summary>
        </member>
        <member name="M:Datalayer.Internal.Subscription.#ctor(Datalayer.IClient,System.Object)">
            <summary>
            Initializes a new instance of Subscription.
            </summary>
            <param name="client">The parent client.</param>
            <param name="userData">The user data.</param>
        </member>
        <member name="P:Datalayer.Internal.Subscription.IsDisposed">
            <summary>
            Gets a value that indicates whether the instance is disposed.
            </summary>
        </member>
        <member name="M:Datalayer.Internal.Subscription.Dispose(System.Boolean)">
            <summary>
            Disposes the instance.
            </summary>
            <param name="disposing">False if called by Finalizer, else true.</param>
        </member>
        <member name="M:Datalayer.Internal.Subscription.Finalize">
            <summary>
            override finalizer only if 'Dispose(bool disposing)' has code to free unmanaged resources
            </summary>
        </member>
        <member name="M:Datalayer.Internal.Subscription.Dispose">
            <summary>
            Disposes the instance
            </summary>
        </member>
        <member name="M:Datalayer.Internal.Subscription.Delete">
            <summary>
            Deletes the underlying native API object(s)
            </summary>
        </member>
        <member name="P:Datalayer.Internal.Subscription.NotifyResponse">
            <summary>
            The Subscriptions notification callback
            </summary>
        </member>
        <member name="P:Datalayer.Internal.Subscription.IsValid">
            <summary>
            Gets a value that indicates whether the subscription is valid
            </summary>
        </member>
        <member name="M:Datalayer.Internal.Subscription.NotifyResponseHandler(Datalayer.DLR_RESULT,Datalayer.NativeMethods.NotifyItem*,System.UInt32,System.Void*)">
            <summary>
            The subscription notify response (datachanged) callback handler
            </summary>
            <param name="status">The status.</param>
            <param name="items">The pointer to the array of changed items.</param>
            <param name="count">The count.</param>
            <param name="userData">The user data.</param>
        </member>
        <member name="M:Datalayer.Internal.Subscription.ExtractIdFromSubscriptionProperties(FlatBuffers.ByteBuffer)">
            <summary>
            Extracts the subscription id from the subscription properties (flatbuffers).
            </summary>
            <param name="bb">The ByteBuffer.</param>
            <returns>The subscription id.</returns>
        </member>
        <member name="E:Datalayer.Internal.Subscription.DataChanged">
            <summary>
            Gets the DataChanged event of the Subscription
            </summary>
        </member>
        <member name="P:Datalayer.Internal.Subscription.Client">
            <summary>
            Gets the client.
            </summary>
        </member>
        <member name="P:Datalayer.Internal.Subscription.Id">
            <summary>
            Gets the subscription id.
            </summary>
        </member>
        <member name="P:Datalayer.Internal.Subscription.UserData">
            <summary>
            Gets the user data.
            </summary>
        </member>
        <member name="M:Datalayer.Internal.Subscription.Subscribe(System.String)">
            <summary>
            Subscribes to a node.
            </summary>
            <param name="address">Address of the subscription.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
            <example>
            <b>Example</b>
            <code> 
            var builder = new FlatBuffers.FlatBufferBuilder(Variant.DefaultFlatbuffersInitialSize);
            var properties = comm.datalayer.SubscriptionProperties.CreateSubscriptionProperties(
               builder: builder,
               idOffset: builder.CreateString("mySubscription"),
               keepaliveInterval: 10000,
               publishInterval: 1000,
               errorInterval: 10000);
            builder.Finish(properties.Value);
            var propertiesFlatbuffers = new Variant(builder);
            
            // Create the Subscription
            var(createResult, subscription) = client.CreateSubscription(propertiesFlatbuffers, userData: null); 
            
            const string cpuLoad = "framework/metrics/system/cpu-utilisation-percent";
            var subscribeResult = subscription.Subscribe(address: cpuLoad);
            </code>
            </example>
        </member>
        <member name="M:Datalayer.Internal.Subscription.SubscribeAsync(System.String)">
            <summary>
            Subscribes to a node asynchronously.
            </summary>
            <param name="address">Address of the subscription.</param>     
            <returns>Task.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Internal.Subscription.SubscribeMulti(System.String[])">
            <summary>
            Subscribes to a list of nodes.
            </summary>
            <param name="addresses">An array of the addresses.</param>      
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Internal.Subscription.SubscribeMultiAsync(System.String[])">
            <summary>
            Subscribes to a list of nodes asynchronously
            </summary>
            <param name="addresses">An array of the addresses.</param>  
            <returns>Task.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Internal.Subscription.Unsubscribe(System.String)">
            <summary>
            Unsubscribes the node.
            </summary>
            <param name="address">Address of the subscription.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Internal.Subscription.UnsubscribeAsync(System.String)">
            <summary>
            Unsubscribes to a node asynchronously.
            </summary>
            <param name="address">Address of the subscription.</param>  
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.Internal.Subscription.UnsubscribeMulti(System.String[])">
            <summary>
            Unsubscribes to a list of nodes.
            </summary>
            <param name="addresses">An array of the addresses.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Internal.Subscription.UnsubscribeMultiAsync(System.String[])">
            <summary>
            Unsubscribes a list of nodes asynchronously.
            </summary>
            <param name="addresses">An array of the addresses.</param>
            <returns>Task.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Internal.Subscription.UnsubscribeAll">
            <summary>
            Unsubscribes all subscribed nodes.
            </summary>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.Internal.Subscription.UnsubscribeAllAsync">
            <summary>
            Unsubscribes all subscribed nodes asynchronously.
            </summary>    
            <returns>Task.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="T:Datalayer.Internal.Utils">
            <summary>
            Internal Utils
            </summary>
        </member>
        <member name="T:Datalayer.Internal.Utils.Strings">
            <summary>
            String Utils
            </summary>
        </member>
        <member name="F:Datalayer.Internal.Utils.Strings.ErrorObjectDisposed">
             <summary>
            Object already disposed and unusable
             </summary>
        </member>
        <member name="F:Datalayer.Internal.Utils.Strings.ErrorObjectNotCreatable">
            <summary>
            Creating object failed because of unknown reason
            </summary>
        </member>
        <member name="F:Datalayer.Internal.Utils.Strings.ErrorObjectNotCloneable">
            <summary>
            Cloning object failed because of unknown reason
            </summary>
        </member>
        <member name="M:Datalayer.Internal.Utils.ToNativePtr(Datalayer.IDatalayerSystem)">
            <summary>
            Gets the pointer to the underlying native API object.
            </summary>
            <param name="datalayerSystem">The DatalayerSystem.</param>
            <returns>The pointer to the underlying native API object.</returns>
        </member>
        <member name="M:Datalayer.Internal.Utils.ToNativePtr(Datalayer.IFactory)">
            <summary>
            Gets the pointer to the underlying native API object.
            </summary>
            <param name="factory">The factory.</param>
            <returns>The pointer to the underlying native API object.</returns>
        </member>
        <member name="M:Datalayer.Internal.Utils.ToNativePtr(Datalayer.IConverter)">
            <summary>
            Gets the pointer to the underlying native API object.
            </summary>
            <param name="converter">The converter.</param>
            <returns>The pointer to the underlying native API object.</returns>
        </member>
        <member name="M:Datalayer.Internal.Utils.ToNativePtr(Datalayer.IClient)">
            <summary>
            Gets the pointer to the underlying native API object.
            </summary>
            <param name="client">The client.</param>
            <returns>The pointer to the underlying native API object.</returns>
        </member>
        <member name="M:Datalayer.Internal.Utils.ToNativePtr(Datalayer.IProvider)">
            <summary>
            Gets the pointer to the underlying native API object.
            </summary>
            <param name="provider">The provider.</param>
            <returns>The pointer to the underlying native API object.</returns>
        </member>
        <member name="M:Datalayer.Internal.Utils.ToNativePtr(Datalayer.IVariant)">
            <summary>
            Gets the pointer to the underlying native API object.
            </summary>
            <param name="variant">The Variant.</param>
            <returns>The pointer to the underlying native API object.</returns>
        </member>
        <member name="M:Datalayer.Internal.Utils.ToNativePtr(Datalayer.IProviderNode)">
            <summary>
            Gets the pointer to the underlying native API object.
            </summary>
            <param name="node">The ProviderNode.</param>
            <returns>The pointer to the underlying native API object.</returns>
        </member>
        <member name="M:Datalayer.Internal.Utils.ToSBytePtr(System.String)">
            <summary>
            Gets the sbyte pointer* of a string.
            </summary>
            <param name="managedString">The input string.</param>
            <returns>The sbyte pointer* of a string.</returns>
        </member>
        <member name="M:Datalayer.Internal.Utils.ToSBytePtr(System.String[])">
            <summary>
            Gets the sbyte pointer** of a string array.
            </summary>
            <param name="stringArray">The input string array.</param>
            <returns>The sbyte pointer** of a string array.</returns>
        </member>
        <member name="M:Datalayer.Internal.Utils.ToString(System.SByte*)">
            <summary>
            Converts an sbyte pointer to a string.
            </summary>
            <param name="sbytePtr">The input sbyte pointer.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Datalayer.Internal.Utils.ToString(System.SByte*,System.Int32)">
            <summary>
            Converts an sbyte pointer to a string.
            </summary>
            <param name="sbytePtr">The input sbyte pointer.</param>s
            <param name="utf8ByteCount">The count of UTF8 bytes.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Datalayer.Internal.Utils.IsNumber(Datalayer.DLR_VARIANT_TYPE)">
            <summary>
            Gets a value that indicates whether the Variant contains a numeric value
            Returns false for numeric arrays and booleans
            </summary>
            <param name="dataType">The datatype.</param>
            <returns>True if the dataType is numeric, else false.</returns>
        </member>
        <member name="M:Datalayer.Internal.Utils.IsArray(Datalayer.DLR_VARIANT_TYPE)">
            <summary>
            Gets a value that indicates whether the given data type is an array type.
            </summary>
            <param name="dataType">The datatype.</param>
            <returns>True if dataType is an array, else false.</returns>
        </member>
        <member name="M:Datalayer.Internal.Utils.ToJsonDataType(Datalayer.DLR_VARIANT_TYPE)">
            <summary>
            Converts the given data type to the corresponding JSON data type used for JSON requests.
            </summary>
            <param name="dataType">The dataType.</param>
            <returns>The corresponding JSON data type.</returns>
        </member>
        <member name="T:Datalayer.ClientAsyncResult">
            <summary>
            ClientAsyncResult implementation
            </summary>
        </member>
        <member name="M:Datalayer.ClientAsyncResult.#ctor(Datalayer.DLR_RESULT)">
            <summary>
            Creates a ClientAsyncResult
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Datalayer.ClientAsyncResult.#ctor(Datalayer.DLR_RESULT,Datalayer.IVariant)">
            <summary>
            Creates a ClientAsyncResult
            </summary>
            <param name="result">The result.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Datalayer.ClientAsyncResult.#ctor(Datalayer.DLR_RESULT,System.Void*)">
            <summary>
            Creates a ClientAsyncResult
            </summary>
            <param name="result">The result.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Datalayer.ClientAsyncResult.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:Datalayer.ClientAsyncResult.Result">
            <summary>
            Gets the result.
            </summary>
        </member>
        <member name="T:Datalayer.NotifyItemWrapper">
            <summary>
            NotifyItemWrapper implementation
            </summary>
        </member>
        <member name="M:Datalayer.NotifyItemWrapper.#ctor(Datalayer.NativeMethods.NotifyItem)">
            <summary>
            Initializes a new instance of NotifyItemWrapper.
            </summary>
            <param name="notifyItem">The notifyItem.</param>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="P:Datalayer.NotifyItemWrapper.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:Datalayer.NotifyItemWrapper.Info">
            <summary>
            Gets the info.
            </summary>
        </member>
        <member name="T:Datalayer.SubscriptionAsyncResult">
            <summary>
            SubscriptionAsyncResult implementation
            </summary>
        </member>
        <member name="M:Datalayer.SubscriptionAsyncResult.#ctor(Datalayer.DLR_RESULT,System.Void*)">
            <summary>
            Initializes a new instance of SubscriptionAsyncResult.
            </summary>
            <param name="result">The result.</param>
            <param name="value">The pointer to the underlying native API object.</param>
        </member>
        <member name="M:Datalayer.SubscriptionAsyncResult.#ctor(Datalayer.DLR_RESULT,System.Void*,Datalayer.ISubscription)">
            <summary>
            Initializes a new instance of SubscriptionAsyncResult.
            </summary>
            <param name="result">The result.</param>
            <param name="value">The pointer to the underlying native API object.</param>
            <param name="subscription">The subscription.</param>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="P:Datalayer.SubscriptionAsyncResult.Subscription">
            <summary>
            Gets the subscription.
            </summary>
        </member>
        <member name="T:Datalayer.IProvider">
            <summary>
            The provider interface
            </summary>
        </member>
        <member name="P:Datalayer.IProvider.System">
            <summary>
            Gets the system.
            </summary>
        </member>
        <member name="P:Datalayer.IProvider.AuthToken">
            <summary>
            Gets the authentication token (JWT) as flatbuffers 'Token' while processing requests. 
            </summary>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.InvalidOperationException">Operation not allowed.</exception>
        </member>
        <member name="P:Datalayer.IProvider.IsConnected">
            <summary>
            Checks the connection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.IProvider.RegisterType(System.String,System.String)">
            <summary>
            Registers the type to the ctrlX Data Layer.
            </summary>
            <param name="address">Address of the node.</param>
            <param name="bfbsPath">Path to flatbuffers type binary bfbs file.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.IProvider.RegisterTypeVariant(System.String,Datalayer.IVariant)">
            <summary>
            Registers the type to the ctrlX Data Layer.
            </summary>
            <param name="address">Address of the node.</param>
            <param name="flatbuffers">Variant with flatbuffers type.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.IProvider.UnregisterType(System.String)">
            <summary>
            Unregisters the type from the ctrlX Data Layer.
            </summary>
            <param name="address">Address of the node.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.IProvider.RegisterNode(System.String,Datalayer.IProviderNodeHandler)">
            <summary>
            Registers the node to the ctrlX Data Layer.
            </summary>
            <param name="address">Address of the node.</param>
            <param name="handler">Reference to the node handler.</param>
            <returns>The corresponding provider node.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.IProvider.UnregisterNode(System.String)">
            <summary>
            Unregisters the node from the ctrlX Data Layer.
            </summary>
            <param name="address">Address of the node.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.IProvider.Start">
            <summary>
            Starts the provider.
            </summary>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Datalayer.IProvider.Stop" -->
        <member name="T:Datalayer.IProviderNode">
            <summary>
            The provider node interface.
            </summary>
        </member>
        <member name="P:Datalayer.IProviderNode.Handler">
            <summary>
            Gets the handler.
            </summary>
        </member>
        <member name="P:Datalayer.IProviderNode.Provider">
            <summary>
            Gets the provider.
            </summary>
        </member>
        <member name="M:Datalayer.IProviderNode.SetTimeout(System.UInt32)">
            <summary>
            Set timeout for a node for asynchron requests (default value is 10000 ms).
            If the handler method of the provider does not return a response within timeoutMillis, the client will automatically receive bad result DL_TIMEOUT.
            The result after timeout will be discarded.
            </summary>
            <param name="timeoutMillis">Timeout in milliseconds for this node.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="T:Datalayer.IProviderNodeHandler">
            <summary>
            The provider node handler interface.
            </summary>
        </member>
        <member name="M:Datalayer.IProviderNodeHandler.OnCreate(System.String,Datalayer.IVariant,Datalayer.IProviderNodeResult)">
            <summary>
            Method to be called for a create request.
            </summary>
            <param name="address">Address of the node.</param>
            <param name="args">Optional request arguments.</param>
            <param name="result">Result of the request.</param>
        </member>
        <member name="M:Datalayer.IProviderNodeHandler.OnRemove(System.String,Datalayer.IProviderNodeResult)">
            <summary>
            Method to be called for a remove request.
            </summary>
            <param name="address">Address of the node.</param>
            <param name="result">Result of the request.</param>
        </member>
        <member name="M:Datalayer.IProviderNodeHandler.OnMetadata(System.String,Datalayer.IProviderNodeResult)">
            <summary>
            Method to be called for a metadata request.
            </summary>
            <param name="address">Address of the node.</param>
            <param name="result">Result of the request.</param>
        </member>
        <member name="M:Datalayer.IProviderNodeHandler.OnBrowse(System.String,Datalayer.IProviderNodeResult)">
            <summary>
            Method to be called for a browse request.
            </summary>
            <param name="address">Address of the node.</param>
            <param name="result">Result of the request.</param>
        </member>
        <member name="M:Datalayer.IProviderNodeHandler.OnRead(System.String,Datalayer.IVariant,Datalayer.IProviderNodeResult)">
            <summary>
            Method to be called for a read request.
            </summary>
            <param name="address">Address of the node.</param>
            <param name="args">Optional request arguments.</param>
            <param name="result">Result of the request.</param>
        </member>
        <member name="M:Datalayer.IProviderNodeHandler.OnWrite(System.String,Datalayer.IVariant,Datalayer.IProviderNodeResult)">
            <summary>
            Method to be called for a write request.
            </summary>
            <param name="address">Address of the node.</param>
            <param name="writeValue">Value to write.</param>
            <param name="result">Result of the request.</param>
        </member>
        <member name="T:Datalayer.IProviderNodeResult">
            <summary>
            The provider node result interface.
            </summary>
        </member>
        <member name="M:Datalayer.IProviderNodeResult.SetResult(Datalayer.DLR_RESULT)">
            <summary>
            Sets the result.
            </summary>
            <param name="result">Result of the request.</param>
        </member>
        <member name="M:Datalayer.IProviderNodeResult.SetResult(Datalayer.DLR_RESULT,Datalayer.IVariant)">
            <summary>.
            Sets the result
            </summary>
            <param name="result">Result of the request.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="T:Datalayer.ISubscription">
            <summary>
            The subscription interface.
            </summary>
        </member>
        <member name="F:Datalayer.ISubscription.DefaultKeepaliveIntervalMillis">
             <summary>
            The default keep alive interval in milli seconds.
             </summary>
        </member>
        <member name="F:Datalayer.ISubscription.DefaultPublishIntervalMillis">
            <summary>
            The default publish interval in milli seconds.
            </summary>
        </member>
        <member name="F:Datalayer.ISubscription.DefaultErrorIntervalMillis">
            <summary>
            The default error interval in milli seconds.
            </summary>
        </member>
        <member name="F:Datalayer.ISubscription.DefaultSamplingIntervalMicros">
            <summary>
            The default sampling interval in micro seconds.
            </summary>
        </member>
        <member name="P:Datalayer.ISubscription.Client">
            <summary>
            Gets the client.
            </summary>
        </member>
        <member name="P:Datalayer.ISubscription.Id">
            <summary>
            Gets the subscription id.
            </summary>
        </member>
        <member name="P:Datalayer.ISubscription.UserData">
            <summary>
            Gets the user data.
            </summary>
        </member>
        <member name="T:Datalayer.ISubscription.DataChangedEventHandler">
            <summary>
            The DataChanged event delegate.
            </summary>
            <param name="subscription">The source subscription, which raises the event.</param>
            <param name="args">The data changed event arguments.</param>
        </member>
        <member name="E:Datalayer.ISubscription.DataChanged">
            <summary>
            Gets the DataChanged event.
            </summary>
        </member>
        <member name="M:Datalayer.ISubscription.Subscribe(System.String)">
            <summary>
            Subscribes to a node.
            </summary>
            <param name="address">Address of the subscription.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
            <example>
            <b>Example</b>
            <code> 
            var builder = new FlatBuffers.FlatBufferBuilder(Variant.DefaultFlatbuffersInitialSize);
            var properties = comm.datalayer.SubscriptionProperties.CreateSubscriptionProperties(
               builder: builder,
               idOffset: builder.CreateString("mySubscription"),
               keepaliveInterval: 10000,
               publishInterval: 1000,
               errorInterval: 10000);
            builder.Finish(properties.Value);
            var propertiesFlatbuffers = new Variant(builder);
            
            // Create the Subscription
            var(createResult, subscription) = client.CreateSubscription(propertiesFlatbuffers, userData: null); 
            
            const string cpuLoad = "framework/metrics/system/cpu-utilisation-percent";
            var subscribeResult = subscription.Subscribe(address: cpuLoad);
            </code>
            </example>
        </member>
        <member name="M:Datalayer.ISubscription.SubscribeAsync(System.String)">
            <summary>
            Subscribes to a node asynchronously.
            </summary>
            <param name="address">Address of the subscription.</param>     
            <returns>Task.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.ISubscription.SubscribeMulti(System.String[])">
            <summary>
            Subscribes to a list of nodes.
            </summary>
            <param name="addresses">An array of the addresses.</param>      
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.ISubscription.SubscribeMultiAsync(System.String[])">
            <summary>
            Subscribes to a list of nodes asynchronously
            </summary>
            <param name="addresses">An array of the addresses.</param>  
            <returns>Task.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.ISubscription.Unsubscribe(System.String)">
            <summary>
            Unsubscribes the node.
            </summary>
            <param name="address">Address of the subscription.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.ISubscription.UnsubscribeAsync(System.String)">
            <summary>
            Unsubscribes to a node asynchronously.
            </summary>
            <param name="address">Address of the subscription.</param>  
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception> 
        </member>
        <member name="M:Datalayer.ISubscription.UnsubscribeMulti(System.String[])">
            <summary>
            Unsubscribes to a list of nodes.
            </summary>
            <param name="addresses">An array of the addresses.</param>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.ISubscription.UnsubscribeMultiAsync(System.String[])">
            <summary>
            Unsubscribes a list of nodes asynchronously.
            </summary>
            <param name="addresses">An array of the addresses.</param>
            <returns>Task.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.ISubscription.UnsubscribeAll">
            <summary>
            Unsubscribes all subscribed nodes.
            </summary>
            <returns>Result of the method call.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.ISubscription.UnsubscribeAllAsync">
            <summary>
            Unsubscribes all subscribed nodes asynchronously.
            </summary>    
            <returns>Task.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="T:Datalayer.ISubscriptionAsyncResult">
            <summary>
            The result of the asynchronous subscription request.
            </summary>
        </member>
        <member name="P:Datalayer.ISubscriptionAsyncResult.Subscription">
            <summary>
            Gets the subscription.
            </summary>
        </member>
        <member name="T:Datalayer.IVariant">
            <summary>
            The variant interface.
            </summary>
        </member>
        <member name="P:Datalayer.IVariant.Value">
            <summary>
            Gets the value of the variant.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.IVariant.Equals(Datalayer.Variant)">
            <summary>
            Gets a value that indicates whether the values are equal.
            </summary>
            <param name="other">Reference to variant.</param>
            <returns>Returns whether the values are equal.</returns>
        </member>
        <member name="M:Datalayer.IVariant.GetHashCode">
            <summary>
            Gets the hash code of the variant.
            </summary>
        </member>
        <member name="P:Datalayer.IVariant.DataType">
            <summary>
            Gets the data type of the variant.
            </summary> 
            <returns>Type of the variant.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="P:Datalayer.IVariant.JsonDataType">
            <summary>
            Gets the data type as JSON string.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="P:Datalayer.IVariant.IsArray">
            <summary>
            Checks if the value is an array.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="P:Datalayer.IVariant.IsString">
            <summary>
            Gets a value that indicates whether the Variant contains a string value
            </summary>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="P:Datalayer.IVariant.IsBool">
            <summary>
            Gets a value that indicates whether the Variant contains a boolean value
            </summary>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="P:Datalayer.IVariant.IsNumber">
            <summary>
            Gets a value that indicates whether the Variant contains a numeric value
            Returns false for numeric arrays and booleans
            </summary>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="P:Datalayer.IVariant.IsFlatbuffers">
            <summary>
            Checks if the value is flatbuffers.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="P:Datalayer.IVariant.IsNull">
            <summary>
            Checks if the value is null.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.IVariant.ToBool">
            <summary>
            Converts the value to bool.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.IVariant.ToSByte">
            <summary>
            Converts the value to an 8-bit signed integer.
            </summary>
            <returns>Value of the variant as a sbyte.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.IVariant.ToByte">
            <summary>
            Converts the value to an 8-bit unsigned integer.
            </summary>
            <returns>Value of the variant as a byte.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.IVariant.ToInt16">
            <summary>
            Converts the value to a 16-bit signed integer.
            </summary>
            <returns>Value of the variant as a short.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.IVariant.ToUInt16">
            <summary>
            Converts the value to a 16-bit unsigned integer.
            </summary>
            <returns>Value of the variant as a ushort.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.IVariant.ToInt32">
            <summary>
            Converts the value to a 32-bit signed integer.
            </summary>
            <returns>Value of the variant as an int.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.IVariant.ToUInt32">
            <summary>
            Converts the value to a 32-bit unsigned integer.
            </summary>
            <returns>Value of the variant as an uint.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.IVariant.ToInt64">
            <summary>
            Converts the value to a 64-bit signed integer.
            </summary>
            <returns>Value of the variant as a long.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.IVariant.ToUInt64">
            <summary>
            Converts the value to a 64-bit unsigned integer.
            </summary>
            <returns>Value of the variant as a ulong.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.IVariant.ToFloat">
            <summary>
            Converts the value to float.
            </summary>
            <returns>Value of the variant as a float.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.IVariant.ToDouble">
            <summary>
            Converts the value to a double-precision floating-point number.
            </summary>
            <returns>Value of the variant as a double.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.IVariant.ToString">
            <summary>
            Converts the value to string. 
            If the value can't be converted for any reason, an empty string is returned.
            For arrays and numbers an empty string is returned (not implemented yet).
            </summary>
            <returns>Value of the variant as a string.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.IVariant.ToDateTime">
            <summary>
            Converts the value to DateTime.
            </summary>
            <returns>Value of the variant as DateTime.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.IVariant.ToBoolArray">
            <summary>
            Converts the value to an array of bool value.
            </summary>
            <returns>An array of bool values.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.IVariant.ToSByteArray">
            <summary>
            Converts the value to an array of an 8-bit signed integers.
            </summary>
            <returns>An array of sbytes.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.IVariant.ToByteArray">
            <summary>
            Converts the value to an array of 8-bit unsigned integers.
            </summary>
            <returns>An array of bytes.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.IVariant.ToInt16Array">
            <summary>
            Converts the value to an array of 16-bit signed integers.
            </summary>
            <returns>An array of short.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.IVariant.ToUInt16Array">
            <summary>
            Converts the value to an array of 16-bit unsigned integers.
            </summary>
            <returns>An array of ushort.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.IVariant.ToInt32Array">
            <summary>
            Converts the value to an array of 32-bit signed integers.
            </summary>
            <returns>An array of int.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.IVariant.ToUInt32Array">
            <summary>
            Converts the value to an array of 32-bit unsigned integers.
            </summary>
            <returns>An array of uint.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.IVariant.ToInt64Array">
            <summary>
            Converts the value to an array of 64-bit signed integers.
            </summary>
            <returns>An array of long.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.IVariant.ToUInt64Array">
            <summary>
            Converts the value to an array of  64-bit unsigned integers.
            </summary>
            <returns>An array of ulong.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.IVariant.ToFloatArray">
            <summary>
            Converts the value to an array of float.
            </summary>
            <returns>An array of float.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.IVariant.ToDoubleArray">
            <summary>
            Converts the value to an array of double-precision floating-point numbers.
            </summary>
            <returns>An array of double.</returns>
        </member>
        <member name="M:Datalayer.IVariant.ToStringArray">
            <summary>
            Converts the value to an array of strings.
            </summary>
            <returns>An array of string.</returns>
        </member>
        <member name="M:Datalayer.IVariant.ToDateTimeArray">
            <summary>
            Converts the value to an array of DateTime.
            </summary>
            <returns>An array of DateTime.</returns>
        </member>
        <member name="M:Datalayer.IVariant.ToRawByteArray">
            <summary>
            Converts the value to an array of 8-bit raw integers.
            </summary>
            <returns>An array of byte.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.IVariant.ToFlatbuffers">
            <summary>
            Converts the value to flatbuffers.
            </summary>
            <returns>ByteBuffer.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.IVariant.CheckConvert(Datalayer.DLR_VARIANT_TYPE)">
            <summary>
            Gets a value that indicates whether the variant can be converted to another type.
            </summary>
            <param name="dataType">Destination type.</param>
            <returns>Result whether the conversion is possible.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.IVariant.Clone">
            <summary>
            Clones the value.
            </summary>
            <returns>Result of clone.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception> 
            <exception cref="T:System.InvalidOperationException">Object ist not cloneable.</exception>
        </member>
        <member name="T:Datalayer.MetadataBuilder">
            <summary>
            The MetadataBuilder class.
            </summary>
        </member>
        <member name="F:Datalayer.MetadataBuilder._builder">
            <summary>
            The builder.
            </summary>
        </member>
        <member name="F:Datalayer.MetadataBuilder._references">
            <summary>
            The references.
            </summary>
        </member>
        <member name="F:Datalayer.MetadataBuilder._extensions">
            <summary>
            The extensions.
            </summary>
        </member>
        <member name="F:Datalayer.MetadataBuilder._displayNames">
            <summary>
            The display names.
            </summary>
        </member>
        <member name="F:Datalayer.MetadataBuilder._descriptions">
            <summary>
            The descriptions.
            </summary>
        </member>
        <member name="F:Datalayer.MetadataBuilder._descriptionOffset">
            <summary>
            The description offset.
            </summary>
        </member>
        <member name="F:Datalayer.MetadataBuilder._descriptionUrlOffset">
            <summary>
            The description URL offset.
            </summary>
        </member>
        <member name="F:Datalayer.MetadataBuilder._nodeClass">
            <summary>
            The node class.
            </summary>
        </member>
        <member name="F:Datalayer.MetadataBuilder._displayNameOffset">
            <summary>
            The display name offset.
            </summary>
        </member>
        <member name="F:Datalayer.MetadataBuilder._displayFormat">
            <summary>
            The display format.
            </summary>
        </member>
        <member name="F:Datalayer.MetadataBuilder._unitOffset">
            <summary>
            The unit offset.
            </summary>
        </member>
        <member name="F:Datalayer.MetadataBuilder._allowedOperationsOffset">
            <summary>
            The allowed operations offset.
            </summary>
        </member>
        <member name="M:Datalayer.MetadataBuilder.#ctor(Datalayer.AllowedOperationFlags,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datalayer.MetadataBuilder"/> class.
            </summary>
            <param name="allowedOperationFlags">The allowed operation flags.</param>
            <param name="description">The description.</param>
            <param name="descriptionUrl">The description URL.</param>
        </member>
        <member name="M:Datalayer.MetadataBuilder.SetAllowedOperations(Datalayer.AllowedOperationFlags)">
            <summary>
            Sets the allowed operations.
            </summary>
            <param name="allowedOperationFlags">The allowed operation flags.</param>
        </member>
        <member name="M:Datalayer.MetadataBuilder.SetDescription(System.String)">
            <summary>
            Sets the description.
            </summary>
            <param name="description">The description.</param>
        </member>
        <member name="M:Datalayer.MetadataBuilder.SetDescriptionUrl(System.String)">
            <summary>
            Sets the description URL.
            </summary>
            <param name="descriptionUrl">The description URL.</param>
        </member>
        <member name="M:Datalayer.MetadataBuilder.SetNodeClass(comm.datalayer.NodeClass)">
            <summary>
            Sets the node class.
            </summary>
            <param name="nodeClass">The node class.</param>
            <returns>The MetadataBuilder instance.</returns>
        </member>
        <member name="M:Datalayer.MetadataBuilder.SetDisplayName(System.String)">
            <summary>
            Sets the display name.
            </summary>
            <param name="displayName">The display name.</param>
            <returns>The MetadataBuilder instance.</returns>
        </member>
        <member name="M:Datalayer.MetadataBuilder.SetDisplayFormat(comm.datalayer.DisplayFormat)">
            <summary>
            Sets the display format.
            </summary>
            <param name="displayFormat">The display format.</param>
            <returns>The MetadataBuilder instance.</returns>
        </member>
        <member name="M:Datalayer.MetadataBuilder.SetUnit(System.String)">
            <summary>
            Sets the unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The MetadataBuilder instance.</returns>
        </member>
        <member name="M:Datalayer.MetadataBuilder.AddReference(Datalayer.ReferenceType,System.String)">
            <summary>
            Adds the reference.
            </summary>
            <param name="type">The type.</param>
            <param name="targetAddress">The target address.</param>
            <returns>The MetadataBuilder instance.</returns>
        </member>
        <member name="M:Datalayer.MetadataBuilder.AddExtension(System.String,System.String)">
            <summary>
            Adds the extension.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>The MetadataBuilder instance.</returns>
        </member>
        <member name="M:Datalayer.MetadataBuilder.AddDisplayName(System.String,System.String)">
            <summary>
            Adds the display name.
            </summary>
            <param name="id">The identifier.</param>
            <param name="text">The text.</param>
            <returns>The MetadataBuilder instance.</returns>
        </member>
        <member name="M:Datalayer.MetadataBuilder.AddDescription(System.String,System.String)">
            <summary>
            Adds the description.
            </summary>
            <param name="id">The identifier.</param>
            <param name="text">The text.</param>
            <returns>The MetadataBuilder instance.</returns>
        </member>
        <member name="M:Datalayer.MetadataBuilder.Build">
            <summary>
            Builds this instance.
            </summary>
            <returns>The MetadataBuilder instance.</returns>
        </member>
        <member name="T:Datalayer.NativeMethods.Datalayer">
            <summary>
            Custom DLL import resolver and library loader for native API libs.
            </summary>
        </member>
        <member name="T:Datalayer.NativeMethods.Datalayer.NativeLibs">
            <summary>
            The NativeLibs class.
            </summary>
        </member>
        <member name="M:Datalayer.NativeMethods.Datalayer.NativeLibs.#ctor(System.String[],System.String)">
            <summary>
            Initializes a new instance of NativeLibs.
            </summary>
            <param name="dependents">The dependents libs.</param>
            <param name="datalayer">The datalayer lib.</param>
        </member>
        <member name="P:Datalayer.NativeMethods.Datalayer.NativeLibs.Dependents">
            <summary>
            Gets the dependent libs
            </summary>
        </member>
        <member name="P:Datalayer.NativeMethods.Datalayer.NativeLibs.Datalayer">
            <summary>
            Gets the datalayer lib
            </summary>
        </member>
        <member name="M:Datalayer.NativeMethods.Datalayer.#cctor">
            <summary>
            Registers our custom import resolver and library loader
            </summary>
        </member>
        <member name="M:Datalayer.NativeMethods.Datalayer.ImportResolver(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath})">
            <summary>
            Loads the librarys and returns a pointer to the library.
            </summary>
            <param name="libraryName">The library name.</param>
            <param name="assembly">The assembly.</param>
            <param name="searchPath">The DLL search path.</param>
            <returns>Pointer to the loaded library.</returns>
        </member>
        <member name="M:Datalayer.NativeMethods.Datalayer.GetNativeLibs">
            <summary>
            Gets the native libs.
            </summary>
            <returns>The native libs.</returns>
        </member>
        <member name="T:Datalayer.ReferenceType">
            <summary>
            The ReferenceType class.
            </summary>
        </member>
        <member name="M:Datalayer.ReferenceType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datalayer.ReferenceType" /> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Datalayer.ReferenceType.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:Datalayer.ReferenceType.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            .</returns>
        </member>
        <member name="P:Datalayer.ReferenceType.ReadType">
            <summary>
            Gets the type of the read.
            </summary>
            <value>
            The type when reading a value (absolute node address).
            Input/Output type are the same.
            </value>
        </member>
        <member name="P:Datalayer.ReferenceType.ReadInType">
            <summary>
            Gets the type of the read in.
            </summary>
            <value>
            The input type when reading a value.
            </value>
        </member>
        <member name="P:Datalayer.ReferenceType.ReadOutType">
            <summary>
            Gets the type of the read out.
            </summary>
            <value>
            The output type when reading a value.
            </value>
        </member>
        <member name="P:Datalayer.ReferenceType.WriteType">
            <summary>
            Gets the type of the write.
            </summary>
            <value>
            The type when writing a value (absolute node address).
            Input/Output type are the same.
            </value>
        </member>
        <member name="P:Datalayer.ReferenceType.WriteInType">
            <summary>
            Gets the type of the write in.
            </summary>
            <value>
            The input type when writing a value.
            </value>
        </member>
        <member name="P:Datalayer.ReferenceType.WriteOutType">
            <summary>
            Gets the type of the write out.
            </summary>
            <value>
            The output type when writing a value.
            </value>
        </member>
        <member name="P:Datalayer.ReferenceType.CreateType">
            <summary>
            Gets the type of the create.
            </summary>
            <value>
            The type when creating a value (absolute node address).
            </value>
        </member>
        <member name="P:Datalayer.ReferenceType.Uses">
            <summary>
            Gets the uses.
            </summary>
            <value>
            Referenced (list of) absolute node addresses .
            </value>
        </member>
        <member name="P:Datalayer.ReferenceType.HasSave">
            <summary>
            Gets the has save.
            </summary>
            <value>
            Reference to a save node address which needs to be called after node change to persist the new value.
            </value>
        </member>
        <member name="T:Datalayer.ResultExtensions">
            <summary>
            Exension methods of the DLR_RESULT enum
            </summary>
        </member>
        <member name="M:Datalayer.ResultExtensions.IsGood(Datalayer.DLR_RESULT)">
            <summary>
            Gets a value that indicates whether the result is good.
            </summary>
            <param name="result">The result.</param>
            <returns>True if the result is good, else false.</returns>
        </member>
        <member name="M:Datalayer.ResultExtensions.IsBad(Datalayer.DLR_RESULT)">
            <summary>
            Gets a value that indicates whether the result is bad.
            </summary>
            <param name="result">The result.</param>
            <returns>True if the result is bad, else false.</returns>
        </member>
        <member name="T:Datalayer.SubscriptionPropertiesBuilder">
            <summary>
            The class SubscriptionPropertiesBuilder
            </summary>
        </member>
        <member name="F:Datalayer.SubscriptionPropertiesBuilder._builder">
            <summary>
            The builder
            </summary>
        </member>
        <member name="F:Datalayer.SubscriptionPropertiesBuilder._rules">
            <summary>
            The rules
            </summary>
        </member>
        <member name="F:Datalayer.SubscriptionPropertiesBuilder._errorIntervalMillis">
            <summary>
            The error interval in milliseconds
            </summary>
        </member>
        <member name="F:Datalayer.SubscriptionPropertiesBuilder._idOffset">
            <summary>
            The identifier offset
            </summary>
        </member>
        <member name="F:Datalayer.SubscriptionPropertiesBuilder._keepAliveIntervalMillis">
            <summary>
            The keep alive interval in milliseconds
            </summary>
        </member>
        <member name="F:Datalayer.SubscriptionPropertiesBuilder._publishIntervalMillis">
            <summary>
            The publish interval in milliseconds
            </summary>
        </member>
        <member name="M:Datalayer.SubscriptionPropertiesBuilder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datalayer.SubscriptionPropertiesBuilder"/> class.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:Datalayer.SubscriptionPropertiesBuilder.SetId(System.String)">
            <summary>
            Sets the identifier.
            </summary>
            <param name="id">The identifier.</param>
            <returns>The SubscriptionPropertiesBuilder instance.</returns>
        </member>
        <member name="M:Datalayer.SubscriptionPropertiesBuilder.SetKeepAliveIntervalMillis(System.UInt32)">
            <summary>
            Sets the keep alive interval in milliseconds.
            </summary>
            <param name="keepAliveIntervalMillis">The keep alive interval in milliseconds.</param>
            <returns>The SubscriptionPropertiesBuilder instance.</returns>
        </member>
        <member name="M:Datalayer.SubscriptionPropertiesBuilder.SetPublishIntervalMillis(System.UInt32)">
            <summary>
            Sets the publish interval in milliseconds.
            </summary>
            <param name="publishIntervalMillis">The publish interval in milliseconds.</param>
            <returns>The SubscriptionPropertiesBuilder instance.</returns>
        </member>
        <member name="M:Datalayer.SubscriptionPropertiesBuilder.SetErrorIntervalMillis(System.UInt32)">
            <summary>
            Sets the error interval in milliseconds.
            </summary>
            <param name="errorIntervalMillis">The error interval in milliseconds.</param>
            <returns>The SubscriptionPropertiesBuilder instance.</returns>
        </member>
        <member name="M:Datalayer.SubscriptionPropertiesBuilder.SetSamplingIntervalMillis(System.UInt64)">
            <summary>
            Sets the sampling interval in milliseconds.
            </summary>
            <param name="samplingIntervalMillis">The sampling interval in milliseconds.</param>
            <returns>The SubscriptionPropertiesBuilder instance.</returns>
        </member>
        <member name="M:Datalayer.SubscriptionPropertiesBuilder.SetSamplingIntervalMicros(System.UInt64)">
            <summary>
            Sets the sampling interval in microseconds.
            </summary>
            <param name="samplingIntervalMicros">The sampling interval in microseconds.</param>
            <returns>The SubscriptionPropertiesBuilder instance.</returns>
        </member>
        <member name="M:Datalayer.SubscriptionPropertiesBuilder.SetDataChangeFilter(System.Single)">
            <summary>
            Sets the data change filter.
            </summary>
            <param name="deadbandValue">The deadband value.</param>
            <returns>The SubscriptionPropertiesBuilder instance.</returns>
        </member>
        <member name="M:Datalayer.SubscriptionPropertiesBuilder.SetChangeEvents(comm.datalayer.DataChangeTrigger,System.Boolean,System.Boolean)">
            <summary>
            Sets the change events.
            </summary>
            <param name="dataChangeTrigger">The data change trigger.</param>
            <param name="browselistChange">if set to <c>true</c> the change event is raised if the browse list changed.</param>
            <param name="metadataChange">if set to <c>true</c> the change event is raised if the meta data changed.</param>
            <returns>The SubscriptionPropertiesBuilder instance.</returns>
        </member>
        <member name="M:Datalayer.SubscriptionPropertiesBuilder.SetQueueing(System.UInt32,comm.datalayer.QueueBehaviour)">
            <summary>
            Sets the queueing.
            </summary>
            <param name="queueSize">Size of the queue.</param>
            <param name="queueBehaviour">The queue behaviour.</param>
            <returns>The SubscriptionPropertiesBuilder instance.</returns>
        </member>
        <member name="M:Datalayer.SubscriptionPropertiesBuilder.SetCounting(System.Boolean)">
            <summary>
            Sets the counting.
            </summary>
            <param name="countSubscriptions">if set to <c>true</c> nodes are counted if subscribed multiple times.</param>
            <returns>The SubscriptionPropertiesBuilder instance.</returns>
        </member>
        <member name="M:Datalayer.SubscriptionPropertiesBuilder.Build">
            <summary>
            Builds this the SubscriptionProperties as flatbuffers object.
            </summary>
            <returns>The SubscriptionPropertiesBuilder instance.</returns>
        </member>
        <member name="T:Datalayer.Variant">
            <summary>
            Variant class
            </summary>
        </member>
        <member name="M:Datalayer.Variant.#ctor(System.Void*)">
            <summary>
            IMPORTANT
            
            If this constructor is called
            - The Variant is created by ANSI-C API, which is also responsible for deletion, so we have to skip it here to prevent access violations.
            - We MUST Clone the value because this instance will be released by the ANSI-C Layer immediately.
            
            IMPORTANT
            </summary>
            <param name="nativePtr">Native pointer.</param>
        </member>
        <member name="P:Datalayer.Variant.IsNullPtr">
            <summary>
            Gets a value that indicates whether the native pointer is null
            </summary>
        </member>
        <member name="P:Datalayer.Variant.Datalayer#Internal#INative#NativePtr">
            <summary>
            Gets the pointer to the underlying native API object.
            </summary>
        </member>
        <member name="P:Datalayer.Variant.IsDisposed">
            <summary>
            Gets a value that indicates whether the instance is disposed.
            </summary>
        </member>
        <member name="M:Datalayer.Variant.Dispose(System.Boolean)">
            <summary>
            Disposes the instance.
            </summary>
            <param name="disposing">False if called by Finalizer, else true.</param>
        </member>
        <member name="M:Datalayer.Variant.Delete">
            <summary>
            Deletes the underlying native API object.
            </summary>
        </member>
        <member name="M:Datalayer.Variant.Finalize">
            <summary>
            Override finalizer only if 'Dispose(bool disposing)' has code to free unmanaged resources
            </summary>
        </member>
        <member name="M:Datalayer.Variant.Dispose">
            <summary>
            Disposes the instance.
            </summary>
        </member>
        <member name="M:Datalayer.Variant.#ctor">
            <summary>
            Creates a Variant
            </summary>
        </member>
        <member name="M:Datalayer.Variant.#ctor(Datalayer.IVariant)">
            <summary>
            Creates a Variant
            </summary>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
            <exception cref="T:System.InvalidOperationException">Object can't be created</exception>
        </member>
        <member name="M:Datalayer.Variant.#ctor(System.Boolean)">
            <summary>
            Creates a Variant
            </summary>
            <param name="value">The value of the Variant.</param>
            <exception cref="T:System.InvalidOperationException">Object can't be created</exception>
        </member>
        <member name="M:Datalayer.Variant.#ctor(System.String)">
            <summary>
            Creates a Variant
            </summary>
            <param name="value">The value of the Variant.</param>
            <exception cref="T:System.InvalidOperationException">Object can't be created</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Variant.#ctor(System.SByte)">
            <summary>
            Creates a Variant
            </summary>
            <param name="value">The value of the Variant.</param>
            <exception cref="T:System.InvalidOperationException">Object can't be created</exception>
        </member>
        <member name="M:Datalayer.Variant.#ctor(System.Int16)">
            <summary>
            Creates a Variant
            </summary>
            <param name="value">The value of the Variant.</param>
            <exception cref="T:System.InvalidOperationException">Object can't be created</exception>
        </member>
        <member name="M:Datalayer.Variant.#ctor(System.Int32)">
            <summary>
            Creates a Variant
            </summary>
            <param name="value">The value of the Variant.</param>
            <exception cref="T:System.InvalidOperationException">Object can't be created</exception>
        </member>
        <member name="M:Datalayer.Variant.#ctor(System.Int64)">
            <summary>
            Creates a Variant
            </summary>
            <param name="value">The value of the Variant.</param>
            <exception cref="T:System.InvalidOperationException">Object can't be created</exception>
        </member>
        <member name="M:Datalayer.Variant.#ctor(System.DateTime)">
            <summary>
            Creates a Variant
            </summary>
            <param name="value">The value of the Variant.</param>
            <exception cref="T:System.InvalidOperationException">Object can't be created</exception>
        </member>
        <member name="M:Datalayer.Variant.#ctor(System.Byte)">
            <summary>
            Creates a Variant
            </summary>
            <param name="value">The value of the Variant.</param>
            <exception cref="T:System.InvalidOperationException">Object can't be created</exception>
        </member>
        <member name="M:Datalayer.Variant.#ctor(System.UInt16)">
            <summary>
            Creates a Variant
            </summary>
            <param name="value">The value of the Variant.</param>
            <exception cref="T:System.InvalidOperationException">Object can't be created</exception>
        </member>
        <member name="M:Datalayer.Variant.#ctor(System.UInt32)">
            <summary>
            Creates a Variant
            </summary>
            <param name="value">The value of the Variant.</param>
            <exception cref="T:System.InvalidOperationException">Object can't be created</exception>
        </member>
        <member name="M:Datalayer.Variant.#ctor(System.UInt64)">
            <summary>
            Creates a Variant
            </summary>
            <param name="value">The value of the Variant.</param>
            <exception cref="T:System.InvalidOperationException">Object can't be created</exception>
        </member>
        <member name="M:Datalayer.Variant.#ctor(System.Single)">
            <summary>
            Creates a Variant
            </summary>
            <param name="value">The value of the Variant.</param>
            <exception cref="T:System.InvalidOperationException">Object can't be created</exception>
        </member>
        <member name="M:Datalayer.Variant.#ctor(System.Double)">
            <summary>
            Creates a Variant
            </summary>
            <param name="value">The value of the Variant.</param>
            <exception cref="T:System.InvalidOperationException">Object can't be created</exception>
        </member>
        <member name="M:Datalayer.Variant.#ctor(System.Boolean[])">
            <summary>
            Creates a Variant
            </summary>
            <param name="value">The value of the Variant.</param>
            <exception cref="T:System.InvalidOperationException">Object can't be created</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Variant.#ctor(System.String[])">
            <summary>
            Creates a Variant
            </summary>
            <param name="value">The value of the Variant.</param>
            <exception cref="T:System.InvalidOperationException">Object can't be created</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Variant.#ctor(System.SByte[])">
            <summary>
            Creates a Variant
            </summary>
            <param name="value">The value of the Variant.</param>
            <exception cref="T:System.InvalidOperationException">Object can't be created</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Variant.#ctor(System.Int16[])">
            <summary>
            Creates a Variant
            </summary>
            <param name="value">The value of the Variant.</param>
            <exception cref="T:System.InvalidOperationException">Object can't be created</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Variant.#ctor(System.Int32[])">
            <summary>
            Creates a Variant
            </summary>
            <param name="value">The value of the Variant.</param>
            <exception cref="T:System.InvalidOperationException">Object can't be created</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Variant.#ctor(System.Int64[])">
            <summary>
            Creates a Variant
            </summary>
            <param name="value">The value of the Variant.</param>
            <exception cref="T:System.InvalidOperationException">Object can't be created</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Variant.#ctor(System.Byte[])">
            <summary>
            Creates a Variant
            </summary>
            <param name="value">The value of the Variant.</param>
            <exception cref="T:System.InvalidOperationException">Object can't be created</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Variant.#ctor(System.UInt16[])">
            <summary>
            Creates a Variant
            </summary>
            <param name="value">The value of the Variant.</param>
            <exception cref="T:System.InvalidOperationException">Object can't be created</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Variant.#ctor(System.UInt32[])">
            <summary>
            Creates a Variant
            </summary>
            <param name="value">The value of the Variant.</param>
            <exception cref="T:System.InvalidOperationException">Object can't be created</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Variant.#ctor(System.UInt64[])">
            <summary>
            Creates a Variant
            </summary>
            <param name="value">The value of the Variant.</param>
            <exception cref="T:System.InvalidOperationException">Object can't be created</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Variant.#ctor(System.Single[])">
            <summary>
            Creates a Variant
            </summary>
            <param name="value">The value of the Variant.</param>
            <exception cref="T:System.InvalidOperationException">Object can't be created</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Variant.#ctor(System.Double[])">
            <summary>
            Creates a Variant
            </summary>
            <param name="value">The value of the Variant.</param>
            <exception cref="T:System.InvalidOperationException">Object can't be created</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Variant.#ctor(System.DateTime[])">
            <summary>
            Creates a Variant
            </summary>
            <param name="value">The value of the Variant.</param>
            <exception cref="T:System.InvalidOperationException">Object can't be created</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Variant.#ctor(FlatBuffers.ByteBuffer)">
            <summary>
            Creates a Variant
            </summary>
            <param name="flatBuffers">The Flatbuffers.</param>
            <exception cref="T:System.InvalidOperationException">Object can't be created</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Variant.#ctor(FlatBuffers.FlatBufferBuilder)">
            <summary>
            Creates a Variant
            </summary>
            <param name="builder">The FlatBufferBuilder.</param>
            <exception cref="T:System.InvalidOperationException">Object can't be created</exception>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Variant.Equals(System.Object)">
            <summary>
            Returns a value that indicates if this Variant equals given object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True if equal, else false.</returns>
        </member>
        <member name="M:Datalayer.Variant.Equals(Datalayer.Variant)">
            <summary>
            Returns a value that indicates if this Variant equals given Variant.
            </summary>
            <param name="other">The other Variant.</param>
            
            <returns>True if equal, else false.</returns>
        </member>
        <member name="M:Datalayer.Variant.GetHashCode">
            <summary>
            Gets the HashCode of this Variant.
            </summary>
            <returns>The HashCode.</returns>
        </member>
        <member name="M:Datalayer.Variant.ToString">
            <summary>
            Gets the value as string.
            </summary>
            <returns>The value as string.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.Variant.op_Equality(Datalayer.Variant,Datalayer.Variant)">
            <summary>
            Equality Operator.
            </summary>
            <param name="l">The left argument.</param>
            <param name="r">The right argument.</param>
            <returns>True if equal, else false.</returns>
        </member>
        <member name="M:Datalayer.Variant.op_Inequality(Datalayer.Variant,Datalayer.Variant)">
            <summary>s
            Unequality Operator.
            </summary>
            <param name="l">The left argument.</param>
            <param name="r">The right argument.</param>
            <returns>True if not equal, else false.</returns>
        </member>
        <member name="F:Datalayer.Variant.DefaultFlatbuffersInitialSize">
            <summary>
            Gets the default Flatbuffers initial size in bytes.
            </summary>
        </member>
        <member name="F:Datalayer.Variant.Null">
            <summary>
            Gets a Variant with no value of data type 'DLR_VARIANT_TYPE_UNKNOWN'.
            </summary>
        </member>
        <member name="F:Datalayer.Variant.Zero">
            <summary>
            Gets a Variant with value '0' of data type 'int' (Int32).
            </summary>
        </member>
        <member name="F:Datalayer.Variant.One">
            <summary>
            Gets a Variant with value '1' of data type 'int' (Int32).
            </summary>
        </member>
        <member name="F:Datalayer.Variant.Empty">
            <summary>
            Gets a Variant with empty string value.
            </summary>
        </member>
        <member name="F:Datalayer.Variant.True">
            <summary>
            Gets a Variant with boolean value 'true'.
            </summary>
        </member>
        <member name="F:Datalayer.Variant.False">
            <summary>
            Gets a Variant with boolean value 'false'.
            </summary>
        </member>
        <member name="P:Datalayer.Variant.Value">
            <summary>
            Gets the value.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="P:Datalayer.Variant.IsNull">
            <summary>
            Gets a value that indicates whether the Variant is null.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="P:Datalayer.Variant.IsArray">
            <summary>
            Gets a value that indicates whether the Variant is an array.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="P:Datalayer.Variant.IsString">
            <summary>
            Gets a value that indicates whether the Variant contains a string value.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="P:Datalayer.Variant.IsBool">
            <summary>
            Gets a value that indicates whether the Variant contains a boolean value.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="P:Datalayer.Variant.IsNumber">
            <summary>
            Gets a value that indicates whether the Variant contains a numeric value.
            Returns false for numeric arrays and booleans
            </summary>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="P:Datalayer.Variant.IsFlatbuffers">
            <summary>
            Gets a value that indicates whether the Variant contains Flatbuffers.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.Variant.ToBool">
            <summary>
            Gets the value as bool.
            </summary>
            <returns>The value as bool.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.Variant.ToSByte">
            <summary>
            Gets the value as sbyte.
            </summary>
            <returns>The value as sbyte.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.Variant.ToByte">
            <summary>
            Gets the value as byte.
            </summary>
            <returns>The value as byte.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.Variant.ToInt16">
            <summary>
            Gets the value as short.
            </summary>
            <returns>The value as short.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.Variant.ToUInt16">
            <summary>
            Gets the value as ushort.
            </summary>
            <returns>The value as ushort.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.Variant.ToInt32">
            <summary>
            Gets the value as int.
            </summary>
            <returns>The value as int.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.Variant.ToUInt32">
            <summary>
            Gets the value as uint.
            </summary>
            <returns>The value as uint.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.Variant.ToInt64">
            <summary>
            Gets the value as long.
            </summary>
            <returns>The value as long.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.Variant.ToUInt64">
            <summary>
            Gets the value as ulong.
            </summary>
            <returns>The value as ulong.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.Variant.ToDateTime">
            <summary>
            Converts the value to a timestamp.
            </summary>
            <returns>Value of the variant as a timestamp.</returns>
        </member>
        <member name="M:Datalayer.Variant.ToFloat">
            <summary>
            Gets the value as float.
            </summary>
            <returns>The value as float.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.Variant.ToDouble">
            <summary>
            Gets the value as double.
            </summary>
            <returns>The value as double.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.Variant.ToBoolArray">
            <summary>
            Gets the value as bool array.
            </summary>
            <returns>The value as bool array.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.Variant.ToSByteArray">
            <summary>
            Gets the value as sbyte array.
            </summary>
            <returns>The value as sbyte array.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.Variant.ToByteArray">
            <summary>
            Gets the value as byte array.
            </summary>
            <returns>The value as byte array.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.Variant.ToInt16Array">
            <summary>
            Gets the value as short array.
            </summary>
            <returns>The value as short array.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.Variant.ToUInt16Array">
            <summary>
            Gets the value as ushort array.
            </summary>
            <returns>The value as ushort array.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.Variant.ToInt32Array">
            <summary>
            Gets the value as int array.
            </summary>
            <returns>The value as int array.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.Variant.ToUInt32Array">
            <summary>
            Gets the value as uint array.
            </summary>
            <returns>The value as uint array.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.Variant.ToInt64Array">
            <summary>
            Gets the value as long array.
            </summary>
            <returns>The value as long array.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.Variant.ToUInt64Array">
            <summary>
            Gets the value as ulong array.
            </summary>
            <returns>The value as ulong array.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.Variant.ToFloatArray">
            <summary>
            Gets the value as float array.
            </summary>
            <returns>The value as float array.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.Variant.ToDoubleArray">
            <summary>
            Gets the value as double array.
            </summary>
            <returns>The value as double array.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.Variant.ToStringArray">
            <summary>
            Gets the value as string array.
            </summary>
            <returns>The value as string array.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.Variant.ToDateTimeArray">
            <summary>
            Gets the value as DateTime array.
            </summary>
            <returns>The value as DateTime array.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="P:Datalayer.Variant.DataType">
            <summary>
            Gets the data type.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="P:Datalayer.Variant.JsonDataType">
            <summary>
            Gets the Json data type.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.Variant.ToFlatbuffers">
            <summary>
            Gets the value as Flatbuffers.
            </summary>
            <returns>The value as Flatbuffers.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.Variant.ToRawByteArray">
            <summary>
            Gets the value as raw byte array (UTF8).
            </summary>
            <returns>The value as raw byte array (UTF8).</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.Variant.Clone">
            <summary>
            Clones the instance
            </summary>
            <returns>Clone of the instance.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.Variant.CheckConvert(Datalayer.DLR_VARIANT_TYPE)">
            <summary>
            Checks if the Variant is convertable to given data type.
            </summary>
            <param name="type">The target type.</param>
            <returns>True if convertable, else false.</returns>
            <exception cref="T:System.ObjectDisposedException">Cannot access a disposed object.</exception>
        </member>
        <member name="M:Datalayer.Variant.op_Implicit(System.Boolean)~Datalayer.Variant">
            <summary>
            Implicit operator
            </summary>
            <param name="source">The source</param>
        </member>
        <member name="M:Datalayer.Variant.op_Implicit(System.Boolean[])~Datalayer.Variant">
            <summary>
            Implicit operator
            </summary>
            <param name="source">The source</param>
        </member>
        <member name="M:Datalayer.Variant.op_Implicit(System.SByte)~Datalayer.Variant">
            <summary>
            Implicit operator
            </summary>
            <param name="source">The source</param>
        </member>
        <member name="M:Datalayer.Variant.op_Implicit(System.SByte[])~Datalayer.Variant">
            <summary>
            Implicit operator
            </summary>
        </member>
        <member name="M:Datalayer.Variant.op_Implicit(System.Byte)~Datalayer.Variant">
            <summary>
            Implicit operator
            </summary>
            <param name="source">The source</param>
        </member>
        <member name="M:Datalayer.Variant.op_Implicit(System.Byte[])~Datalayer.Variant">
            <summary>
            Implicit operator
            </summary>
        </member>
        <member name="M:Datalayer.Variant.op_Implicit(System.Int16)~Datalayer.Variant">
            <summary>
            Implicit operator
            </summary>
            <param name="source">The source</param>
        </member>
        <member name="M:Datalayer.Variant.op_Implicit(System.Int16[])~Datalayer.Variant">
            <summary>
            Implicit operator
            </summary>
        </member>
        <member name="M:Datalayer.Variant.op_Implicit(System.UInt16)~Datalayer.Variant">
            <summary>
            Implicit operator
            </summary>
            <param name="source">The source</param>
        </member>
        <member name="M:Datalayer.Variant.op_Implicit(System.UInt16[])~Datalayer.Variant">
             <summary>
            Implicit operator
             </summary>
        </member>
        <member name="M:Datalayer.Variant.op_Implicit(System.Int32)~Datalayer.Variant">
            <summary>
            Implicit operator
            </summary>
            <param name="source">The source</param>
        </member>
        <member name="M:Datalayer.Variant.op_Implicit(System.Int32[])~Datalayer.Variant">
            <summary>
            Implicit operator
            </summary>
            <param name="source">The source</param>
        </member>
        <member name="M:Datalayer.Variant.op_Implicit(System.UInt32)~Datalayer.Variant">
            <summary>
            Implicit operator
            </summary>
            <param name="source">The source</param>
        </member>
        <member name="M:Datalayer.Variant.op_Implicit(System.UInt32[])~Datalayer.Variant">
            <summary>
            Implicit operator
            </summary>
            <param name="source">The source</param>
        </member>
        <member name="M:Datalayer.Variant.op_Implicit(System.Int64)~Datalayer.Variant">
            <summary>
            Implicit operator
            </summary>
            <param name="source">The source</param>
        </member>
        <member name="M:Datalayer.Variant.op_Implicit(System.Int64[])~Datalayer.Variant">
            <summary>
            Implicit operator
            </summary>
            <param name="source">The source</param>
        </member>
        <member name="M:Datalayer.Variant.op_Implicit(System.UInt64)~Datalayer.Variant">
            <summary>
            Implicit operator
            </summary>
            <param name="source">The source</param>
        </member>
        <member name="M:Datalayer.Variant.op_Implicit(System.UInt64[])~Datalayer.Variant">
            <summary>
            Implicit operator
            </summary>
        </member>
        <member name="M:Datalayer.Variant.op_Implicit(System.Single)~Datalayer.Variant">
            <summary>
            Implicit operator
            </summary>
            <param name="source">The source</param>
        </member>
        <member name="M:Datalayer.Variant.op_Implicit(System.Single[])~Datalayer.Variant">
            <summary>
            Implicit operator
            </summary>
        </member>
        <member name="M:Datalayer.Variant.op_Implicit(System.Double)~Datalayer.Variant">
            <summary>
            Implicit operator
            </summary>
            <param name="source">The source</param>
        </member>
        <member name="M:Datalayer.Variant.op_Implicit(System.Double[])~Datalayer.Variant">
            <summary>
            Implicit operator
            </summary>
        </member>
        <member name="M:Datalayer.Variant.op_Implicit(System.String)~Datalayer.Variant">
            <summary>
            Implicit operator
            </summary>
            <param name="source">The source</param>
        </member>
        <member name="M:Datalayer.Variant.op_Implicit(System.String[])~Datalayer.Variant">
            <summary>
            Implicit operator
            </summary>
            <param name="source">The source</param>
        </member>
        <member name="M:Datalayer.Variant.op_Implicit(System.DateTime)~Datalayer.Variant">
            <summary>
            Implicit operator
            </summary>
            <param name="source">The source</param>
        </member>
        <member name="M:Datalayer.Variant.op_Implicit(System.DateTime[])~Datalayer.Variant">
            <summary>
            Implicit operator
            </summary>
            <param name="source">The source</param>
        </member>
        <member name="M:Datalayer.Variant.op_Implicit(FlatBuffers.FlatBufferBuilder)~Datalayer.Variant">
            <summary>
            Implicit operator
            </summary>
            <param name="source">The source</param>
        </member>
        <member name="M:Datalayer.Variant.op_Implicit(FlatBuffers.ByteBuffer)~Datalayer.Variant">
            <summary>
            Implicit operator
            </summary>
            <param name="source">The source</param>
        </member>
        <member name="M:Datalayer.Variant.SetBool(System.Boolean)">
            <summary>
            Sets a int8 value.
            </summary>
            <param name="value">Value to set.</param>
            <returns>Status of set value.</returns>
        </member>
        <member name="M:Datalayer.Variant.SetInt8(System.SByte)">
            <summary>
            Sets a int8 value.
            </summary>
            <param name="value">Value to set.</param>
            <returns>Status of set value.</returns>
        </member>
        <member name="M:Datalayer.Variant.SetUInt8(System.Byte)">
            <summary>
            Sets a uint8 value.
            </summary>
            <param name="value">Value to set.</param>
            <returns>Status of set value.</returns>
        </member>
        <member name="M:Datalayer.Variant.SetInt16(System.Int16)">
            <summary>
            Sets a int16 value.
            </summary>
            <param name="value">Value to set.</param>
            <returns>Status of set value.</returns>
        </member>
        <member name="M:Datalayer.Variant.SetUInt16(System.UInt16)">
            <summary>
            Sets a uint16 value.
            </summary>
            <param name="value">Value to set.</param>
            <returns>Status of set value.</returns>
        </member>
        <member name="M:Datalayer.Variant.SetInt32(System.Int32)">
            <summary>
            Sets a int32 value.
            </summary>
            <param name="value">Value to set.</param>
            <returns>Status of set value.</returns>
        </member>
        <member name="M:Datalayer.Variant.SetUInt32(System.UInt32)">
            <summary>
            Sets a uint32 value.
            </summary>
            <param name="value">Value to set.</param>
            <returns>Status of set value.</returns>
        </member>
        <member name="M:Datalayer.Variant.SetInt64(System.Int64)">
            <summary>
            Sets a int64 value.
            </summary>
            <param name="value">Value to set.</param>
            <returns>Status of set value.</returns>
        </member>
        <member name="M:Datalayer.Variant.SetUInt64(System.UInt64)">
            <summary>
            Sets a uint64 value.
            </summary>
            <param name="value">Value to set.</param>
            <returns>Status of set value.</returns>
        </member>
        <member name="M:Datalayer.Variant.SetFloat32(System.Single)">
            <summary>
            Sets a float value.
            </summary>
            <param name="value">Value to set.</param>
            <returns>Status of set value.</returns>
        </member>
        <member name="M:Datalayer.Variant.SetFloat64(System.Double)">
            <summary>
            Sets a double value.
            </summary>
            <param name="value">Value to set.</param>
            <returns>Status of set value.</returns>
        </member>
        <member name="M:Datalayer.Variant.SetString(System.String)">
            <summary>
            Sets a string.
            </summary>
            <param name="value">Value to set.</param>
            <returns>Status of set value.</returns>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Variant.SetTimestamp(System.DateTime)">
            <summary>
            Sets a timestamp value.
            </summary>
            <param name="value">Value to set.</param>
            <returns>Status of set value.</returns>
        </member>
        <member name="M:Datalayer.Variant.SetArrayOfBool(System.Boolean[])">
            <summary>
            Sets an array of bool.
            </summary>
            <param name="value">Array of Values to set.</param>
            <returns>Status of set value.</returns>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Variant.SetArrayOfInt8(System.SByte[])">
            <summary>
            Sets an array of int8.
            </summary>
            <param name="value">Array of Values to set.</param>
            <returns>Status of set value.</returns>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Variant.SetArrayOfUInt8(System.Byte[])">
            <summary>
            Sets an array of uint8.
            </summary>
            <param name="value">Array of Values to set.</param>
            <returns>Status of set value.</returns>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Variant.SetArrayOfInt16(System.Int16[])">
            <summary>
            Sets an array of int16.
            </summary>
            <param name="value">Array of Values to set.</param>
            <returns>Status of set value.</returns>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Variant.SetArrayOfUInt16(System.UInt16[])">
            <summary>
            Sets an array of uint16.
            </summary>
            <param name="value">Array of Values to set.</param>
            <returns>Status of set value.</returns>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Variant.SetArrayOfInt32(System.Int32[])">
            <summary>
            Sets an array of int32.
            </summary>
            <param name="value">Array of Values to set.</param>
            <returns>Status of set value.</returns>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Variant.SetArrayOfUInt32(System.UInt32[])">
            <summary>
            Sets an array of uint32.
            </summary>
            <param name="value">Array of Values to set.</param>
            <returns>Status of set value.</returns>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Variant.SetArrayOfInt64(System.Int64[])">
            <summary>
            Sets an array of int64.
            </summary>
            <param name="value">Array of Values to set.</param>
            <returns>Status of set value.</returns>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Variant.SetArrayOfUInt64(System.UInt64[])">
            <summary>
            Sets an array of uint64.
            </summary>
            <param name="value">Array of Values to set.</param>
            <returns>Status of set value.</returns>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Variant.SetArrayOfFloat32(System.Single[])">
            <summary>
            Sets an array of float.
            </summary>
            <param name="value">Array of Values to set.</param>
            <returns>Status of set value.</returns>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Variant.SetArrayOfFloat64(System.Double[])">
            <summary>
            Sets an array of double.
            </summary>
            <param name="value">Array of Values to set.</param>
            <returns>Status of set value.</returns>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Variant.SetArrayOfTimestamp(System.DateTime[])">
            <summary>
            Sets an array of DateTime.
            </summary>
            <param name="value">Array of Values to set.</param>
            <returns>Status of set value.</returns>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Variant.SetArrayOfString(System.String[])">
            <summary>
            Sets an array of strings.
            </summary>
            <param name="value">Array of Values to set.</param>
            <returns>Status of set value.</returns>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Variant.SetFlatbuffers(FlatBuffers.ByteBuffer)">
            <summary>
            Set flatbuffers.
            </summary>
            <param name="value">Value to set.</param>
            <returns>Status of set value.</returns>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null.</exception>
        </member>
        <member name="M:Datalayer.Variant.GetSize">
            <summary>
            Gets the size´.
            </summary>
            <returns>.</returns>
        </member>
        <member name="M:Datalayer.Variant.GetCount">
            <summary>
            Gets the count.
            </summary>
            <returns>.</returns>
        </member>
    </members>
</doc>
